import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var Deeplinks = /** @class */ (function (_super) {
    __extends(Deeplinks, _super);
    function Deeplinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Deeplinks.prototype.route = function (paths) { return cordova(this, "route", { "observable": true }, arguments); };
    Deeplinks.prototype.routeWithNavController = function (navController, paths, options) { return cordova(this, "routeWithNavController", { "observable": true }, arguments); };
    Deeplinks.pluginName = "Deeplinks";
    Deeplinks.plugin = "ionic-plugin-deeplinks";
    Deeplinks.pluginRef = "IonicDeeplink";
    Deeplinks.repo = "https://github.com/ionic-team/ionic-plugin-deeplinks";
    Deeplinks.install = "ionic cordova plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/";
    Deeplinks.installVariables = ["URL_SCHEME", "DEEPLINK_SCHEME", "DEEPLINK_HOST", "ANDROID_PATH_PREFIX"];
    Deeplinks.platforms = ["Android", "Browser", "iOS"];
Deeplinks.ɵfac = function Deeplinks_Factory(t) { return ɵDeeplinks_BaseFactory(t || Deeplinks); };
Deeplinks.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Deeplinks, factory: function (t) { return Deeplinks.ɵfac(t); } });
var ɵDeeplinks_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Deeplinks);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Deeplinks, [{
        type: Injectable
    }], null, null); })();
    return Deeplinks;
}(IonicNativePlugin));
export { Deeplinks };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,