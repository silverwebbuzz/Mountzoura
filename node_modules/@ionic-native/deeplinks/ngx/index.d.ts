import { IonicNativePlugin } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export interface DeeplinkMatch {
    /**
     * The route info for the matched route
     */
    $route: any;
    /**
     * Any arguments passed either through route parameters or GET parameters
     */
    $args: any;
    /**
     * The deeplink object processed from the plugin, along with any
     * any internal native data available as "extras" at the time
     * the route was matched (for example, Facebook sometimes adds extra data)
     */
    $link: any;
}
export interface DeeplinkOptions {
    /**
     * Set the matched route as root page using `navCtrl.setRoot()` method.
     */
    root: boolean;
}
/**
 * @name Deeplinks
 * @premier deeplinks
 * @description This plugin handles deeplinks on iOS and Android for both custom URL scheme links
 * and Universal App Links.
 *
 * Please read the [ionic plugin deeplinks docs](https://github.com/ionic-team/ionic-plugin-deeplinks) for iOS and Android integration.
 * You must add `universal-links` to your `config.xml` and set up Apple App Site Association (AASA) for iOS and Asset Links for Android.
 *
 * @usage
 * ```typescript
 * import { Deeplinks } from '@ionic-native/deeplinks/ngx';
 *
 * constructor(private deeplinks: Deeplinks) { }
 *
 * this.deeplinks.route({
 *      '/about-us': AboutPage,
 *      '/universal-links-test': AboutPage,
 *      '/products/:productId': ProductPage
 *    }).subscribe(match => {
 *      // match.$route - the route we matched, which is the matched entry from the arguments to route()
 *      // match.$args - the args passed in the link
 *      // match.$link - the full link data
 *      console.log('Successfully matched route', match);
 *    }, nomatch => {
 *      // nomatch.$link - the full link data
 *      console.error('Got a deeplink that didn\'t match', nomatch);
 *    });
 * ```
 *
 * Alternatively, if you're using Ionic, there's a convenience method that takes a reference to a `NavController` and handles
 * the actual navigation for you:
 *
 * ```typescript
 * this.deeplinks.routeWithNavController(this.navController, {
 *   '/about-us': AboutPage,
 *   '/products/:productId': ProductPage
 * }).subscribe(match => {
 *     // match.$route - the route we matched, which is the matched entry from the arguments to route()
 *     // match.$args - the args passed in the link
 *     // match.$link - the full link data
 *     console.log('Successfully matched route', match);
 *   }, nomatch => {
 *     // nomatch.$link - the full link data
 *     console.error('Got a deeplink that didn\'t match', nomatch);
 *   });
 * ```
 *
 * See the [Ionic Deeplinks Demo](https://github.com/ionic-team/ionic2-deeplinks-demo/blob/master/app/app.ts) for an example of how to
 * retrieve the `NavController` reference at runtime.
 *
 * @interfaces
 * DeeplinkMatch
 */
export declare class Deeplinks extends IonicNativePlugin {
    /**
     * Define a set of paths to match against incoming deeplinks.
     *
     * @param {paths} paths Define a set of paths to match against incoming deeplinks.
     * paths takes an object of the form { 'path': data }. If a deeplink
     * matches the path, the resulting path-data pair will be returned in the
     * promise result which you can then use to navigate in the app as you see fit.
     * @returns {Observable<DeeplinkMatch>} Returns an Observable that is called each time a deeplink comes through, and
     * errors if a deeplink comes through that does not match a given path.
     */
    route(paths: any): Observable<DeeplinkMatch>;
    /**
     *
     * This is a convenience version of `route` that takes a reference to a NavController
     * from Ionic, or a custom class that conforms to this protocol:
     *
     * NavController.push = function(View, Params){}
     *
     * This handler will automatically navigate when a route matches. If you need finer-grained
     * control over the behavior of a matching deeplink, use the plain `route` method.
     *
     * @param {Nav} navController Define a set of paths to match against incoming deeplinks.
     * paths takes an object of the form { 'path': data }. If a deeplink
     * matches the path, the resulting path-data pair will be returned in the
     * promise result which you can then use to navigate in the app as you see fit.
     *
     * @param {Object} paths
     *
     * @param {DeeplinkOptions} options
     *
     * @returns {Observable<DeeplinkMatch>} Returns an Observable that resolves each time a deeplink comes through, and
     * errors if a deeplink comes through that does not match a given path.
     */
    routeWithNavController(navController: any, paths: any, options?: DeeplinkOptions): Observable<DeeplinkMatch>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Deeplinks, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Deeplinks>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5leHBvcnQgaW50ZXJmYWNlIERlZXBsaW5rTWF0Y2gge1xuICAgIC8qKlxuICAgICAqIFRoZSByb3V0ZSBpbmZvIGZvciB0aGUgbWF0Y2hlZCByb3V0ZVxuICAgICAqL1xuICAgICRyb3V0ZTogYW55O1xuICAgIC8qKlxuICAgICAqIEFueSBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciB0aHJvdWdoIHJvdXRlIHBhcmFtZXRlcnMgb3IgR0VUIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICAkYXJnczogYW55O1xuICAgIC8qKlxuICAgICAqIFRoZSBkZWVwbGluayBvYmplY3QgcHJvY2Vzc2VkIGZyb20gdGhlIHBsdWdpbiwgYWxvbmcgd2l0aCBhbnlcbiAgICAgKiBhbnkgaW50ZXJuYWwgbmF0aXZlIGRhdGEgYXZhaWxhYmxlIGFzIFwiZXh0cmFzXCIgYXQgdGhlIHRpbWVcbiAgICAgKiB0aGUgcm91dGUgd2FzIG1hdGNoZWQgKGZvciBleGFtcGxlLCBGYWNlYm9vayBzb21ldGltZXMgYWRkcyBleHRyYSBkYXRhKVxuICAgICAqL1xuICAgICRsaW5rOiBhbnk7XG59XG5leHBvcnQgaW50ZXJmYWNlIERlZXBsaW5rT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBtYXRjaGVkIHJvdXRlIGFzIHJvb3QgcGFnZSB1c2luZyBgbmF2Q3RybC5zZXRSb290KClgIG1ldGhvZC5cbiAgICAgKi9cbiAgICByb290OiBib29sZWFuO1xufVxuLyoqXG4gKiBAbmFtZSBEZWVwbGlua3NcbiAqIEBwcmVtaWVyIGRlZXBsaW5rc1xuICogQGRlc2NyaXB0aW9uIFRoaXMgcGx1Z2luIGhhbmRsZXMgZGVlcGxpbmtzIG9uIGlPUyBhbmQgQW5kcm9pZCBmb3IgYm90aCBjdXN0b20gVVJMIHNjaGVtZSBsaW5rc1xuICogYW5kIFVuaXZlcnNhbCBBcHAgTGlua3MuXG4gKlxuICogUGxlYXNlIHJlYWQgdGhlIFtpb25pYyBwbHVnaW4gZGVlcGxpbmtzIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2lvbmljLXBsdWdpbi1kZWVwbGlua3MpIGZvciBpT1MgYW5kIEFuZHJvaWQgaW50ZWdyYXRpb24uXG4gKiBZb3UgbXVzdCBhZGQgYHVuaXZlcnNhbC1saW5rc2AgdG8geW91ciBgY29uZmlnLnhtbGAgYW5kIHNldCB1cCBBcHBsZSBBcHAgU2l0ZSBBc3NvY2lhdGlvbiAoQUFTQSkgZm9yIGlPUyBhbmQgQXNzZXQgTGlua3MgZm9yIEFuZHJvaWQuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBEZWVwbGlua3MgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2RlZXBsaW5rcy9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZGVlcGxpbmtzOiBEZWVwbGlua3MpIHsgfVxuICpcbiAqIHRoaXMuZGVlcGxpbmtzLnJvdXRlKHtcbiAqICAgICAgJy9hYm91dC11cyc6IEFib3V0UGFnZSxcbiAqICAgICAgJy91bml2ZXJzYWwtbGlua3MtdGVzdCc6IEFib3V0UGFnZSxcbiAqICAgICAgJy9wcm9kdWN0cy86cHJvZHVjdElkJzogUHJvZHVjdFBhZ2VcbiAqICAgIH0pLnN1YnNjcmliZShtYXRjaCA9PiB7XG4gKiAgICAgIC8vIG1hdGNoLiRyb3V0ZSAtIHRoZSByb3V0ZSB3ZSBtYXRjaGVkLCB3aGljaCBpcyB0aGUgbWF0Y2hlZCBlbnRyeSBmcm9tIHRoZSBhcmd1bWVudHMgdG8gcm91dGUoKVxuICogICAgICAvLyBtYXRjaC4kYXJncyAtIHRoZSBhcmdzIHBhc3NlZCBpbiB0aGUgbGlua1xuICogICAgICAvLyBtYXRjaC4kbGluayAtIHRoZSBmdWxsIGxpbmsgZGF0YVxuICogICAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IG1hdGNoZWQgcm91dGUnLCBtYXRjaCk7XG4gKiAgICB9LCBub21hdGNoID0+IHtcbiAqICAgICAgLy8gbm9tYXRjaC4kbGluayAtIHRoZSBmdWxsIGxpbmsgZGF0YVxuICogICAgICBjb25zb2xlLmVycm9yKCdHb3QgYSBkZWVwbGluayB0aGF0IGRpZG5cXCd0IG1hdGNoJywgbm9tYXRjaCk7XG4gKiAgICB9KTtcbiAqIGBgYFxuICpcbiAqIEFsdGVybmF0aXZlbHksIGlmIHlvdSdyZSB1c2luZyBJb25pYywgdGhlcmUncyBhIGNvbnZlbmllbmNlIG1ldGhvZCB0aGF0IHRha2VzIGEgcmVmZXJlbmNlIHRvIGEgYE5hdkNvbnRyb2xsZXJgIGFuZCBoYW5kbGVzXG4gKiB0aGUgYWN0dWFsIG5hdmlnYXRpb24gZm9yIHlvdTpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiB0aGlzLmRlZXBsaW5rcy5yb3V0ZVdpdGhOYXZDb250cm9sbGVyKHRoaXMubmF2Q29udHJvbGxlciwge1xuICogICAnL2Fib3V0LXVzJzogQWJvdXRQYWdlLFxuICogICAnL3Byb2R1Y3RzLzpwcm9kdWN0SWQnOiBQcm9kdWN0UGFnZVxuICogfSkuc3Vic2NyaWJlKG1hdGNoID0+IHtcbiAqICAgICAvLyBtYXRjaC4kcm91dGUgLSB0aGUgcm91dGUgd2UgbWF0Y2hlZCwgd2hpY2ggaXMgdGhlIG1hdGNoZWQgZW50cnkgZnJvbSB0aGUgYXJndW1lbnRzIHRvIHJvdXRlKClcbiAqICAgICAvLyBtYXRjaC4kYXJncyAtIHRoZSBhcmdzIHBhc3NlZCBpbiB0aGUgbGlua1xuICogICAgIC8vIG1hdGNoLiRsaW5rIC0gdGhlIGZ1bGwgbGluayBkYXRhXG4gKiAgICAgY29uc29sZS5sb2coJ1N1Y2Nlc3NmdWxseSBtYXRjaGVkIHJvdXRlJywgbWF0Y2gpO1xuICogICB9LCBub21hdGNoID0+IHtcbiAqICAgICAvLyBub21hdGNoLiRsaW5rIC0gdGhlIGZ1bGwgbGluayBkYXRhXG4gKiAgICAgY29uc29sZS5lcnJvcignR290IGEgZGVlcGxpbmsgdGhhdCBkaWRuXFwndCBtYXRjaCcsIG5vbWF0Y2gpO1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIFNlZSB0aGUgW0lvbmljIERlZXBsaW5rcyBEZW1vXShodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYzItZGVlcGxpbmtzLWRlbW8vYmxvYi9tYXN0ZXIvYXBwL2FwcC50cykgZm9yIGFuIGV4YW1wbGUgb2YgaG93IHRvXG4gKiByZXRyaWV2ZSB0aGUgYE5hdkNvbnRyb2xsZXJgIHJlZmVyZW5jZSBhdCBydW50aW1lLlxuICpcbiAqIEBpbnRlcmZhY2VzXG4gKiBEZWVwbGlua01hdGNoXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERlZXBsaW5rcyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgICAvKipcbiAgICAgKiBEZWZpbmUgYSBzZXQgb2YgcGF0aHMgdG8gbWF0Y2ggYWdhaW5zdCBpbmNvbWluZyBkZWVwbGlua3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3BhdGhzfSBwYXRocyBEZWZpbmUgYSBzZXQgb2YgcGF0aHMgdG8gbWF0Y2ggYWdhaW5zdCBpbmNvbWluZyBkZWVwbGlua3MuXG4gICAgICogcGF0aHMgdGFrZXMgYW4gb2JqZWN0IG9mIHRoZSBmb3JtIHsgJ3BhdGgnOiBkYXRhIH0uIElmIGEgZGVlcGxpbmtcbiAgICAgKiBtYXRjaGVzIHRoZSBwYXRoLCB0aGUgcmVzdWx0aW5nIHBhdGgtZGF0YSBwYWlyIHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlXG4gICAgICogcHJvbWlzZSByZXN1bHQgd2hpY2ggeW91IGNhbiB0aGVuIHVzZSB0byBuYXZpZ2F0ZSBpbiB0aGUgYXBwIGFzIHlvdSBzZWUgZml0LlxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPERlZXBsaW5rTWF0Y2g+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBpcyBjYWxsZWQgZWFjaCB0aW1lIGEgZGVlcGxpbmsgY29tZXMgdGhyb3VnaCwgYW5kXG4gICAgICogZXJyb3JzIGlmIGEgZGVlcGxpbmsgY29tZXMgdGhyb3VnaCB0aGF0IGRvZXMgbm90IG1hdGNoIGEgZ2l2ZW4gcGF0aC5cbiAgICAgKi9cbiAgICByb3V0ZShwYXRoczogYW55KTogT2JzZXJ2YWJsZTxEZWVwbGlua01hdGNoPjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIFRoaXMgaXMgYSBjb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGByb3V0ZWAgdGhhdCB0YWtlcyBhIHJlZmVyZW5jZSB0byBhIE5hdkNvbnRyb2xsZXJcbiAgICAgKiBmcm9tIElvbmljLCBvciBhIGN1c3RvbSBjbGFzcyB0aGF0IGNvbmZvcm1zIHRvIHRoaXMgcHJvdG9jb2w6XG4gICAgICpcbiAgICAgKiBOYXZDb250cm9sbGVyLnB1c2ggPSBmdW5jdGlvbihWaWV3LCBQYXJhbXMpe31cbiAgICAgKlxuICAgICAqIFRoaXMgaGFuZGxlciB3aWxsIGF1dG9tYXRpY2FsbHkgbmF2aWdhdGUgd2hlbiBhIHJvdXRlIG1hdGNoZXMuIElmIHlvdSBuZWVkIGZpbmVyLWdyYWluZWRcbiAgICAgKiBjb250cm9sIG92ZXIgdGhlIGJlaGF2aW9yIG9mIGEgbWF0Y2hpbmcgZGVlcGxpbmssIHVzZSB0aGUgcGxhaW4gYHJvdXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05hdn0gbmF2Q29udHJvbGxlciBEZWZpbmUgYSBzZXQgb2YgcGF0aHMgdG8gbWF0Y2ggYWdhaW5zdCBpbmNvbWluZyBkZWVwbGlua3MuXG4gICAgICogcGF0aHMgdGFrZXMgYW4gb2JqZWN0IG9mIHRoZSBmb3JtIHsgJ3BhdGgnOiBkYXRhIH0uIElmIGEgZGVlcGxpbmtcbiAgICAgKiBtYXRjaGVzIHRoZSBwYXRoLCB0aGUgcmVzdWx0aW5nIHBhdGgtZGF0YSBwYWlyIHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlXG4gICAgICogcHJvbWlzZSByZXN1bHQgd2hpY2ggeW91IGNhbiB0aGVuIHVzZSB0byBuYXZpZ2F0ZSBpbiB0aGUgYXBwIGFzIHlvdSBzZWUgZml0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhdGhzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0RlZXBsaW5rT3B0aW9uc30gb3B0aW9uc1xuICAgICAqXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8RGVlcGxpbmtNYXRjaD59IFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IHJlc29sdmVzIGVhY2ggdGltZSBhIGRlZXBsaW5rIGNvbWVzIHRocm91Z2gsIGFuZFxuICAgICAqIGVycm9ycyBpZiBhIGRlZXBsaW5rIGNvbWVzIHRocm91Z2ggdGhhdCBkb2VzIG5vdCBtYXRjaCBhIGdpdmVuIHBhdGguXG4gICAgICovXG4gICAgcm91dGVXaXRoTmF2Q29udHJvbGxlcihuYXZDb250cm9sbGVyOiBhbnksIHBhdGhzOiBhbnksIG9wdGlvbnM/OiBEZWVwbGlua09wdGlvbnMpOiBPYnNlcnZhYmxlPERlZXBsaW5rTWF0Y2g+O1xufVxuIl19