import { IonicNativePlugin } from '@ionic-native/core';
/**
 * Options for the video playback using the `play` function.
 */
import * as ɵngcc0 from '@angular/core';
export interface VideoOptions {
    /**
     * Set the initial volume of the video playback, where 0.0 is 0% volume and 1.0 is 100%.
     * For example: for a volume of 30% set the value to 0.3.
     */
    volume?: number;
    /**
     * There are two options for the scaling mode. SCALE_TO_FIT which is default and SCALE_TO_FIT_WITH_CROPPING.
     * These strings are the only ones which can be passed as option.
     */
    scalingMode?: number;
}
/**
 * @name Video Player
 * @description
 * A Cordova plugin that simply allows you to immediately play a video in fullscreen mode.
 *
 * Requires Cordova plugin: `com.moust.cordova.videoplayer`. For more info, please see the [VideoPlayer plugin docs](https://github.com/moust/cordova-plugin-videoplayer).
 *
 * @usage
 * ```typescript
 * import { VideoPlayer } from '@ionic-native/video-player/ngx';
 *
 * constructor(private videoPlayer: VideoPlayer) { }
 *
 * ...
 *
 * // Playing a video.
 * this.videoPlayer.play('file:///android_asset/www/movie.mp4').then(() => {
 *  console.log('video completed');
 * }).catch(err => {
 *  console.log(err);
 * });
 *
 * ```
 * @interfaces
 * VideoOptions
 */
export declare class VideoPlayer extends IonicNativePlugin {
    /**
     * Plays the video from the passed url.
     * @param fileUrl {string} File url to the video.
     * @param options {VideoOptions?} Optional video playback settings. See options above.
     * @returns {Promise<any>} Resolves promise when the video was played successfully.
     */
    play(fileUrl: string, options?: VideoOptions): Promise<any>;
    /**
     * Stops the video playback immediatly.
     */
    close(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<VideoPlayer, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<VideoPlayer>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbi8qKlxuICogT3B0aW9ucyBmb3IgdGhlIHZpZGVvIHBsYXliYWNrIHVzaW5nIHRoZSBgcGxheWAgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmlkZW9PcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGluaXRpYWwgdm9sdW1lIG9mIHRoZSB2aWRlbyBwbGF5YmFjaywgd2hlcmUgMC4wIGlzIDAlIHZvbHVtZSBhbmQgMS4wIGlzIDEwMCUuXG4gICAgICogRm9yIGV4YW1wbGU6IGZvciBhIHZvbHVtZSBvZiAzMCUgc2V0IHRoZSB2YWx1ZSB0byAwLjMuXG4gICAgICovXG4gICAgdm9sdW1lPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZXJlIGFyZSB0d28gb3B0aW9ucyBmb3IgdGhlIHNjYWxpbmcgbW9kZS4gU0NBTEVfVE9fRklUIHdoaWNoIGlzIGRlZmF1bHQgYW5kIFNDQUxFX1RPX0ZJVF9XSVRIX0NST1BQSU5HLlxuICAgICAqIFRoZXNlIHN0cmluZ3MgYXJlIHRoZSBvbmx5IG9uZXMgd2hpY2ggY2FuIGJlIHBhc3NlZCBhcyBvcHRpb24uXG4gICAgICovXG4gICAgc2NhbGluZ01vZGU/OiBudW1iZXI7XG59XG4vKipcbiAqIEBuYW1lIFZpZGVvIFBsYXllclxuICogQGRlc2NyaXB0aW9uXG4gKiBBIENvcmRvdmEgcGx1Z2luIHRoYXQgc2ltcGx5IGFsbG93cyB5b3UgdG8gaW1tZWRpYXRlbHkgcGxheSBhIHZpZGVvIGluIGZ1bGxzY3JlZW4gbW9kZS5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvbS5tb3VzdC5jb3Jkb3ZhLnZpZGVvcGxheWVyYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW1ZpZGVvUGxheWVyIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vbW91c3QvY29yZG92YS1wbHVnaW4tdmlkZW9wbGF5ZXIpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3ZpZGVvLXBsYXllci9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlkZW9QbGF5ZXI6IFZpZGVvUGxheWVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiAvLyBQbGF5aW5nIGEgdmlkZW8uXG4gKiB0aGlzLnZpZGVvUGxheWVyLnBsYXkoJ2ZpbGU6Ly8vYW5kcm9pZF9hc3NldC93d3cvbW92aWUubXA0JykudGhlbigoKSA9PiB7XG4gKiAgY29uc29sZS5sb2coJ3ZpZGVvIGNvbXBsZXRlZCcpO1xuICogfSkuY2F0Y2goZXJyID0+IHtcbiAqICBjb25zb2xlLmxvZyhlcnIpO1xuICogfSk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogVmlkZW9PcHRpb25zXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFZpZGVvUGxheWVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqIFBsYXlzIHRoZSB2aWRlbyBmcm9tIHRoZSBwYXNzZWQgdXJsLlxuICAgICAqIEBwYXJhbSBmaWxlVXJsIHtzdHJpbmd9IEZpbGUgdXJsIHRvIHRoZSB2aWRlby5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7VmlkZW9PcHRpb25zP30gT3B0aW9uYWwgdmlkZW8gcGxheWJhY2sgc2V0dGluZ3MuIFNlZSBvcHRpb25zIGFib3ZlLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJlc29sdmVzIHByb21pc2Ugd2hlbiB0aGUgdmlkZW8gd2FzIHBsYXllZCBzdWNjZXNzZnVsbHkuXG4gICAgICovXG4gICAgcGxheShmaWxlVXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBWaWRlb09wdGlvbnMpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU3RvcHMgdGhlIHZpZGVvIHBsYXliYWNrIGltbWVkaWF0bHkuXG4gICAgICovXG4gICAgY2xvc2UoKTogdm9pZDtcbn1cbiJdfQ==