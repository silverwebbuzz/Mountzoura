import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var VideoPlayer = /** @class */ (function (_super) {
    __extends(VideoPlayer, _super);
    function VideoPlayer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoPlayer.prototype.play = function (fileUrl, options) { return cordova(this, "play", {}, arguments); };
    VideoPlayer.prototype.close = function () { return cordova(this, "close", { "sync": true }, arguments); };
    VideoPlayer.pluginName = "VideoPlayer";
    VideoPlayer.plugin = "https://github.com/moust/cordova-plugin-videoplayer.git";
    VideoPlayer.pluginRef = "VideoPlayer";
    VideoPlayer.repo = "https://github.com/moust/cordova-plugin-videoplayer";
    VideoPlayer.platforms = ["Android"];
VideoPlayer.ɵfac = function VideoPlayer_Factory(t) { return ɵVideoPlayer_BaseFactory(t || VideoPlayer); };
VideoPlayer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: VideoPlayer, factory: function (t) { return VideoPlayer.ɵfac(t); } });
var ɵVideoPlayer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(VideoPlayer);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VideoPlayer, [{
        type: Injectable
    }], null, null); })();
    return VideoPlayer;
}(IonicNativePlugin));
export { VideoPlayer };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvdmlkZW8tcGxheWVyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztBQUN4RTtBQUVnRCxJQWlEZiwrQkFBaUI7QUFBQztBQUU5QjtBQUVyQjtBQUFNLElBSUosMEJBQUksYUFBQyxPQUFlLEVBQUUsT0FBc0I7QUFLbkMsSUFHVCwyQkFBSztBQUUyRDtBQUE0QztBQUFvRjtBQUEyQztBQUE4RTtJQWxCOVMsV0FBVyx3QkFEdkIsVUFBVSxFQUFFLFFBQ0EsV0FBVzs7Ozs7MEJBQUU7QUFBQyxzQkFyRDNCO0FBQUUsRUFxRCtCLGlCQUFpQjtBQUNqRCxTQURZLFdBQVc7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHRoZSB2aWRlbyBwbGF5YmFjayB1c2luZyB0aGUgYHBsYXlgIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZpZGVvT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIGluaXRpYWwgdm9sdW1lIG9mIHRoZSB2aWRlbyBwbGF5YmFjaywgd2hlcmUgMC4wIGlzIDAlIHZvbHVtZSBhbmQgMS4wIGlzIDEwMCUuXG4gICAqIEZvciBleGFtcGxlOiBmb3IgYSB2b2x1bWUgb2YgMzAlIHNldCB0aGUgdmFsdWUgdG8gMC4zLlxuICAgKi9cbiAgdm9sdW1lPzogbnVtYmVyO1xuICAvKipcbiAgICogVGhlcmUgYXJlIHR3byBvcHRpb25zIGZvciB0aGUgc2NhbGluZyBtb2RlLiBTQ0FMRV9UT19GSVQgd2hpY2ggaXMgZGVmYXVsdCBhbmQgU0NBTEVfVE9fRklUX1dJVEhfQ1JPUFBJTkcuXG4gICAqIFRoZXNlIHN0cmluZ3MgYXJlIHRoZSBvbmx5IG9uZXMgd2hpY2ggY2FuIGJlIHBhc3NlZCBhcyBvcHRpb24uXG4gICAqL1xuICBzY2FsaW5nTW9kZT86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBAbmFtZSBWaWRlbyBQbGF5ZXJcbiAqIEBkZXNjcmlwdGlvblxuICogQSBDb3Jkb3ZhIHBsdWdpbiB0aGF0IHNpbXBseSBhbGxvd3MgeW91IHRvIGltbWVkaWF0ZWx5IHBsYXkgYSB2aWRlbyBpbiBmdWxsc2NyZWVuIG1vZGUuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb20ubW91c3QuY29yZG92YS52aWRlb3BsYXllcmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtWaWRlb1BsYXllciBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL21vdXN0L2NvcmRvdmEtcGx1Z2luLXZpZGVvcGxheWVyKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFZpZGVvUGxheWVyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS92aWRlby1wbGF5ZXIvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZGVvUGxheWVyOiBWaWRlb1BsYXllcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogLy8gUGxheWluZyBhIHZpZGVvLlxuICogdGhpcy52aWRlb1BsYXllci5wbGF5KCdmaWxlOi8vL2FuZHJvaWRfYXNzZXQvd3d3L21vdmllLm1wNCcpLnRoZW4oKCkgPT4ge1xuICogIGNvbnNvbGUubG9nKCd2aWRlbyBjb21wbGV0ZWQnKTtcbiAqIH0pLmNhdGNoKGVyciA9PiB7XG4gKiAgY29uc29sZS5sb2coZXJyKTtcbiAqIH0pO1xuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIFZpZGVvT3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1ZpZGVvUGxheWVyJyxcbiAgcGx1Z2luOiAnaHR0cHM6Ly9naXRodWIuY29tL21vdXN0L2NvcmRvdmEtcGx1Z2luLXZpZGVvcGxheWVyLmdpdCcsXG4gIHBsdWdpblJlZjogJ1ZpZGVvUGxheWVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9tb3VzdC9jb3Jkb3ZhLXBsdWdpbi12aWRlb3BsYXllcicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFZpZGVvUGxheWVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogUGxheXMgdGhlIHZpZGVvIGZyb20gdGhlIHBhc3NlZCB1cmwuXG4gICAqIEBwYXJhbSBmaWxlVXJsIHtzdHJpbmd9IEZpbGUgdXJsIHRvIHRoZSB2aWRlby5cbiAgICogQHBhcmFtIG9wdGlvbnMge1ZpZGVvT3B0aW9ucz99IE9wdGlvbmFsIHZpZGVvIHBsYXliYWNrIHNldHRpbmdzLiBTZWUgb3B0aW9ucyBhYm92ZS5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmVzb2x2ZXMgcHJvbWlzZSB3aGVuIHRoZSB2aWRlbyB3YXMgcGxheWVkIHN1Y2Nlc3NmdWxseS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcGxheShmaWxlVXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBWaWRlb09wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyB0aGUgdmlkZW8gcGxheWJhY2sgaW1tZWRpYXRseS5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBjbG9zZSgpOiB2b2lkIHt9XG59XG4iXX0=