import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/firestore';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire/firestore";
export const collections = {
    users: 'users',
};
let FirestoreSyncService = class FirestoreSyncService {
    constructor(afs) {
        this.afs = afs;
        // this.afs.firestore.settings({timestampsInSnapshots: true});
    }
    // get timestamp() {
    //     return firebase.firestore.FieldValue.serverTimestamp();
    // }
    getUserDocRefByUID(uid) {
        return this.afs.doc(`${collections.users}/${uid}`);
    }
    deleteUserData(uid) {
        const userRef = this.getUserDocRefByUID(uid);
        return userRef.delete();
    }
    updateUserData(user) {
        // Sets user$ data to firestore on login
        const userRef = this.getUserDocRefByUID(user.uid);
        const data = {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName,
            photoURL: user.photoURL,
            phoneNumber: user.phoneNumber,
            providerId: user.providerId
        };
        return userRef.set(data, { merge: true });
    }
};
FirestoreSyncService.ctorParameters = () => [
    { type: AngularFirestore }
];
FirestoreSyncService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FirestoreSyncService_Factory() { return new FirestoreSyncService(i0.ɵɵinject(i1.AngularFirestore)); }, token: FirestoreSyncService, providedIn: "root" });
FirestoreSyncService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], FirestoreSyncService);
export { FirestoreSyncService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZXN0b3JlLXN5bmMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hdXRoLWZpcmViYXNldWkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZmlyZXN0b3JlLXN5bmMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsd0JBQXdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQzs7O0FBR25GLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRztJQUN6QixLQUFLLEVBQUUsT0FBTztDQUNmLENBQUM7QUFLRixJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFvQjtJQUUvQixZQUFtQixHQUFxQjtRQUFyQixRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUN0Qyw4REFBOEQ7SUFDaEUsQ0FBQztJQUVELG9CQUFvQjtJQUNwQiw4REFBOEQ7SUFDOUQsSUFBSTtJQUVHLGtCQUFrQixDQUFDLEdBQVc7UUFDbkMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxLQUFLLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sY0FBYyxDQUFDLEdBQVc7UUFDL0IsTUFBTSxPQUFPLEdBQXVDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqRixPQUFPLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBR00sY0FBYyxDQUFDLElBQWM7UUFDbEMsd0NBQXdDO1FBQ3hDLE1BQU0sT0FBTyxHQUF1QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RGLE1BQU0sSUFBSSxHQUFhO1lBQ3JCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7U0FDNUIsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0NBQ0YsQ0FBQTs7WUEvQnlCLGdCQUFnQjs7O0FBRjdCLG9CQUFvQjtJQUhoQyxVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csb0JBQW9CLENBaUNoQztTQWpDWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBbmd1bGFyRmlyZXN0b3JlLCBBbmd1bGFyRmlyZXN0b3JlRG9jdW1lbnR9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUvZmlyZXN0b3JlJztcbmltcG9ydCB7VXNlckluZm99IGZyb20gJ2ZpcmViYXNlJztcblxuZXhwb3J0IGNvbnN0IGNvbGxlY3Rpb25zID0ge1xuICB1c2VyczogJ3VzZXJzJyxcbn07XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEZpcmVzdG9yZVN5bmNTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgYWZzOiBBbmd1bGFyRmlyZXN0b3JlKSB7XG4gICAgLy8gdGhpcy5hZnMuZmlyZXN0b3JlLnNldHRpbmdzKHt0aW1lc3RhbXBzSW5TbmFwc2hvdHM6IHRydWV9KTtcbiAgfVxuXG4gIC8vIGdldCB0aW1lc3RhbXAoKSB7XG4gIC8vICAgICByZXR1cm4gZmlyZWJhc2UuZmlyZXN0b3JlLkZpZWxkVmFsdWUuc2VydmVyVGltZXN0YW1wKCk7XG4gIC8vIH1cblxuICBwdWJsaWMgZ2V0VXNlckRvY1JlZkJ5VUlEKHVpZDogc3RyaW5nKTogQW5ndWxhckZpcmVzdG9yZURvY3VtZW50PFVzZXJJbmZvPiB7XG4gICAgcmV0dXJuIHRoaXMuYWZzLmRvYyhgJHtjb2xsZWN0aW9ucy51c2Vyc30vJHt1aWR9YCk7XG4gIH1cblxuICBwdWJsaWMgZGVsZXRlVXNlckRhdGEodWlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHVzZXJSZWY6IEFuZ3VsYXJGaXJlc3RvcmVEb2N1bWVudDxVc2VySW5mbz4gPSB0aGlzLmdldFVzZXJEb2NSZWZCeVVJRCh1aWQpO1xuICAgIHJldHVybiB1c2VyUmVmLmRlbGV0ZSgpO1xuICB9XG5cblxuICBwdWJsaWMgdXBkYXRlVXNlckRhdGEodXNlcjogVXNlckluZm8pOiBQcm9taXNlPGFueT4ge1xuICAgIC8vIFNldHMgdXNlciQgZGF0YSB0byBmaXJlc3RvcmUgb24gbG9naW5cbiAgICBjb25zdCB1c2VyUmVmOiBBbmd1bGFyRmlyZXN0b3JlRG9jdW1lbnQ8VXNlckluZm8+ID0gdGhpcy5nZXRVc2VyRG9jUmVmQnlVSUQodXNlci51aWQpO1xuICAgIGNvbnN0IGRhdGE6IFVzZXJJbmZvID0ge1xuICAgICAgdWlkOiB1c2VyLnVpZCxcbiAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgZGlzcGxheU5hbWU6IHVzZXIuZGlzcGxheU5hbWUsXG4gICAgICBwaG90b1VSTDogdXNlci5waG90b1VSTCxcbiAgICAgIHBob25lTnVtYmVyOiB1c2VyLnBob25lTnVtYmVyLFxuICAgICAgcHJvdmlkZXJJZDogdXNlci5wcm92aWRlcklkXG4gICAgfTtcbiAgICByZXR1cm4gdXNlclJlZi5zZXQoZGF0YSwge21lcmdlOiB0cnVlfSk7XG4gIH1cbn1cbiJdfQ==