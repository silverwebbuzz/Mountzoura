var NgxAuthFirebaseUIModule_1;
import { __decorate } from "tslib";
// @angular/*
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RouterModule } from '@angular/router';
import { FlexLayoutModule } from '@angular/flex-layout';
// @angular/fire
import { FIREBASE_APP_NAME, FIREBASE_OPTIONS } from '@angular/fire';
import { AngularFireAuthModule } from '@angular/fire/auth';
import { AngularFirestoreModule } from '@angular/fire/firestore';
// @angular/material
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatIconModule, MatIconRegistry } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatMenuModule } from '@angular/material/menu';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatTabsModule } from '@angular/material/tabs';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatPasswordStrengthModule } from '@angular-material-extensions/password-strength';
import { NgxAuthFirebaseuiLoginComponent } from './components/ngx-auth-firebaseui-login/ngx-auth-firebaseui-login.component';
import { NgxAuthFirebaseuiRegisterComponent } from './components/ngx-auth-firebaseui-register/ngx-auth-firebaseui-register.component';
import { DomSanitizer } from '@angular/platform-browser';
// ngx-auth-firebaseui
// components
import { AuthComponent } from './components/ngx-auth-firebaseui/auth.component';
import { UserComponent } from './components/ngx-auth-firebaseui-user/user.component';
import { AuthProvidersComponent } from './components/providers/auth.providers.component';
import { EmailConfirmationComponent } from './components/email-confirmation/email-confirmation.component';
import { ngxAuthFirebaseUIConfigFactory } from './interfaces/config.interface';
import { NgxAuthFirebaseuiAvatarComponent } from './components/ngx-auth-firebaseui-avatar/ngx-auth-firebaseui-avatar.component';
import { LegalityDialogComponent } from './components/legality-dialog/legality-dialog.component';
// guards
import { LoggedInGuard } from './guards/logged-in.guard';
// services
import { FirestoreSyncService } from './services/firestore-sync.service';
import { AuthProcessService } from './services/auth-process.service';
import { NgxAuthFirebaseUIConfigToken, UserProvidedConfigToken } from './tokens';
// interfaces
// ###################################################################################################
// Export module's public API
// components
export { LegalityDialogComponent } from './components/legality-dialog/legality-dialog.component';
export { NgxAuthFirebaseuiAvatarComponent } from './components/ngx-auth-firebaseui-avatar/ngx-auth-firebaseui-avatar.component';
export { UserComponent } from './components/ngx-auth-firebaseui-user/user.component';
export { AuthComponent } from './components/ngx-auth-firebaseui/auth.component';
export { AuthProvidersComponent, Layout, Theme } from './components/providers/auth.providers.component';
export { NgxAuthFirebaseuiLoginComponent } from './components/ngx-auth-firebaseui-login/ngx-auth-firebaseui-login.component';
export { NgxAuthFirebaseuiRegisterComponent } from './components/ngx-auth-firebaseui-register/ngx-auth-firebaseui-register.component';
// guards
export { LoggedInGuard } from './guards/logged-in.guard';
// services
export { AuthProcessService, AuthProvider } from './services/auth-process.service';
export { FirestoreSyncService } from './services/firestore-sync.service';
let NgxAuthFirebaseUIModule = NgxAuthFirebaseUIModule_1 = class NgxAuthFirebaseUIModule {
    constructor(iconRegistry, sanitizer, auth) {
        this.iconRegistry = iconRegistry;
        this.sanitizer = sanitizer;
        auth.listenToUserEvents();
        this.registerProviderIcons();
    }
    static forRoot(configFactory, appNameFactory = () => undefined, config = {}) {
        return {
            ngModule: NgxAuthFirebaseUIModule_1,
            providers: [
                {
                    provide: FIREBASE_OPTIONS,
                    useValue: configFactory
                },
                {
                    provide: FIREBASE_APP_NAME,
                    useFactory: appNameFactory
                },
                { provide: UserProvidedConfigToken, useValue: config },
                {
                    provide: NgxAuthFirebaseUIConfigToken,
                    useFactory: ngxAuthFirebaseUIConfigFactory,
                    deps: [UserProvidedConfigToken]
                },
                AuthProcessService,
                FirestoreSyncService,
                LoggedInGuard
            ]
        };
    }
    registerProviderIcons() {
        this.iconRegistry
            .addSvgIcon('google', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/google.svg'))
            .addSvgIcon('apple', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/apple.svg'))
            .addSvgIcon('google-colored', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/google.svg'))
            .addSvgIcon('facebook', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/facebook.svg'))
            .addSvgIcon('twitter', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/twitter.svg'))
            .addSvgIcon('github', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/github-circle.svg'))
            .addSvgIcon('microsoft', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/microsoft.svg'))
            .addSvgIcon('yahoo', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/yahoo.svg'))
            .addSvgIcon('phone', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/phone.svg'));
    }
};
NgxAuthFirebaseUIModule.ctorParameters = () => [
    { type: MatIconRegistry },
    { type: DomSanitizer },
    { type: AuthProcessService }
];
NgxAuthFirebaseUIModule = NgxAuthFirebaseUIModule_1 = __decorate([
    NgModule({
        imports: [
            CommonModule,
            // HTTP
            RouterModule,
            HttpClientModule,
            // FLEX_LAYOUT
            FlexLayoutModule,
            // FORMS
            FormsModule,
            ReactiveFormsModule,
            // MATERIAL2
            MatTabsModule,
            MatCardModule,
            MatInputModule,
            MatButtonModule,
            MatIconModule,
            MatSnackBarModule,
            MatDividerModule,
            MatChipsModule,
            MatTooltipModule,
            MatDialogModule,
            MatCheckboxModule,
            MatProgressSpinnerModule,
            MatProgressBarModule,
            MatDialogModule,
            MatMenuModule,
            // ANGULAR MATERIAL EXTENSIONS
            MatPasswordStrengthModule,
            // ANGULARFIRE2
            AngularFireAuthModule,
            AngularFirestoreModule,
        ],
        exports: [
            AuthComponent,
            UserComponent,
            NgxAuthFirebaseuiAvatarComponent,
            AuthProvidersComponent,
            EmailConfirmationComponent,
            // LoggedInGuard,
            AngularFireAuthModule,
            AngularFirestoreModule,
            NgxAuthFirebaseuiLoginComponent,
            NgxAuthFirebaseuiRegisterComponent
        ],
        declarations: [
            AuthComponent,
            UserComponent,
            NgxAuthFirebaseuiAvatarComponent,
            AuthProvidersComponent,
            EmailConfirmationComponent,
            LegalityDialogComponent,
            NgxAuthFirebaseuiLoginComponent,
            NgxAuthFirebaseuiRegisterComponent
        ],
        entryComponents: [
            UserComponent,
            LegalityDialogComponent
        ]
    })
], NgxAuthFirebaseUIModule);
export { NgxAuthFirebaseUIModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWF1dGgtZmlyZWJhc2V1aS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYXV0aC1maXJlYmFzZXVpLyIsInNvdXJjZXMiOlsibGliL25neC1hdXRoLWZpcmViYXNldWkubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsYUFBYTtBQUNiLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBQXNCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUMsV0FBVyxFQUFFLG1CQUFtQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDdEQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELGdCQUFnQjtBQUNoQixPQUFPLEVBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELG9CQUFvQjtBQUNwQixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFDLGFB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O1lBQ2IsYUFBYTtZQUNiLGdDQUFnQztZQUNoQyxzQkFBc0I7WUFDdEIsMEJBQTBCO1lBQzFCLHVCQUF1QjtZQUN2QiwrQkFBK0I7WUFDL0Isa0NBQWtDO1NBQ25DO1FBQ0QsZUFBZSxFQUFFO1lBQ2YsYUFBYTtZQUNiLHVCQUF1QjtTQUN4QjtLQUNGLENBQUM7R0FDVyx1QkFBdUIsQ0FnRG5DO1NBaERZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBhbmd1bGFyLypcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0h0dHBDbGllbnRNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7Um91dGVyTW9kdWxlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtGbGV4TGF5b3V0TW9kdWxlfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dCc7XG4vLyBAYW5ndWxhci9maXJlXG5pbXBvcnQge0ZJUkVCQVNFX0FQUF9OQU1FLCBGSVJFQkFTRV9PUFRJT05TLCBGaXJlYmFzZUFwcENvbmZpZ30gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5pbXBvcnQge0FuZ3VsYXJGaXJlQXV0aE1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvZmlyZS9hdXRoJztcbmltcG9ydCB7QW5ndWxhckZpcmVzdG9yZU1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvZmlyZS9maXJlc3RvcmUnO1xuLy8gQGFuZ3VsYXIvbWF0ZXJpYWxcbmltcG9ydCB7TWF0QnV0dG9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9idXR0b24nO1xuaW1wb3J0IHtNYXRDYXJkTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jYXJkJztcbmltcG9ydCB7TWF0Q2hlY2tib3hNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NoZWNrYm94JztcbmltcG9ydCB7TWF0Q2hpcHNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NoaXBzJztcbmltcG9ydCB7TWF0RGlhbG9nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHtNYXREaXZpZGVyTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaXZpZGVyJztcbmltcG9ydCB7TWF0SWNvbk1vZHVsZSwgTWF0SWNvblJlZ2lzdHJ5fSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcbmltcG9ydCB7TWF0SW5wdXRNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2lucHV0JztcbmltcG9ydCB7TWF0TWVudU1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvbWVudSc7XG5pbXBvcnQge01hdFByb2dyZXNzQmFyTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9wcm9ncmVzcy1iYXInO1xuaW1wb3J0IHtNYXRQcm9ncmVzc1NwaW5uZXJNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3Byb2dyZXNzLXNwaW5uZXInO1xuaW1wb3J0IHtNYXRTbmFja0Jhck1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc25hY2stYmFyJztcbmltcG9ydCB7TWF0VGFic01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvdGFicyc7XG5pbXBvcnQge01hdFRvb2x0aXBNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3Rvb2x0aXAnO1xuXG5pbXBvcnQge01hdFBhc3N3b3JkU3RyZW5ndGhNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyLW1hdGVyaWFsLWV4dGVuc2lvbnMvcGFzc3dvcmQtc3RyZW5ndGgnO1xuXG5cbmltcG9ydCB7Tmd4QXV0aEZpcmViYXNldWlMb2dpbkNvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL25neC1hdXRoLWZpcmViYXNldWktbG9naW4vbmd4LWF1dGgtZmlyZWJhc2V1aS1sb2dpbi5jb21wb25lbnQnO1xuaW1wb3J0IHtOZ3hBdXRoRmlyZWJhc2V1aVJlZ2lzdGVyQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvbmd4LWF1dGgtZmlyZWJhc2V1aS1yZWdpc3Rlci9uZ3gtYXV0aC1maXJlYmFzZXVpLXJlZ2lzdGVyLmNvbXBvbmVudCc7XG5cblxuaW1wb3J0IHtEb21TYW5pdGl6ZXJ9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuLy8gbmd4LWF1dGgtZmlyZWJhc2V1aVxuLy8gY29tcG9uZW50c1xuaW1wb3J0IHtBdXRoQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvbmd4LWF1dGgtZmlyZWJhc2V1aS9hdXRoLmNvbXBvbmVudCc7XG5pbXBvcnQge1VzZXJDb21wb25lbnR9IGZyb20gJy4vY29tcG9uZW50cy9uZ3gtYXV0aC1maXJlYmFzZXVpLXVzZXIvdXNlci5jb21wb25lbnQnO1xuaW1wb3J0IHtBdXRoUHJvdmlkZXJzQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvcHJvdmlkZXJzL2F1dGgucHJvdmlkZXJzLmNvbXBvbmVudCc7XG5pbXBvcnQge0VtYWlsQ29uZmlybWF0aW9uQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvZW1haWwtY29uZmlybWF0aW9uL2VtYWlsLWNvbmZpcm1hdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHtOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZywgbmd4QXV0aEZpcmViYXNlVUlDb25maWdGYWN0b3J5fSBmcm9tICcuL2ludGVyZmFjZXMvY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQge05neEF1dGhGaXJlYmFzZXVpQXZhdGFyQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvbmd4LWF1dGgtZmlyZWJhc2V1aS1hdmF0YXIvbmd4LWF1dGgtZmlyZWJhc2V1aS1hdmF0YXIuY29tcG9uZW50JztcbmltcG9ydCB7TGVnYWxpdHlEaWFsb2dDb21wb25lbnR9IGZyb20gJy4vY29tcG9uZW50cy9sZWdhbGl0eS1kaWFsb2cvbGVnYWxpdHktZGlhbG9nLmNvbXBvbmVudCc7XG4vLyBndWFyZHNcbmltcG9ydCB7TG9nZ2VkSW5HdWFyZH0gZnJvbSAnLi9ndWFyZHMvbG9nZ2VkLWluLmd1YXJkJztcbi8vIHNlcnZpY2VzXG5pbXBvcnQge0ZpcmVzdG9yZVN5bmNTZXJ2aWNlfSBmcm9tICcuL3NlcnZpY2VzL2ZpcmVzdG9yZS1zeW5jLnNlcnZpY2UnO1xuaW1wb3J0IHtBdXRoUHJvY2Vzc1NlcnZpY2V9IGZyb20gJy4vc2VydmljZXMvYXV0aC1wcm9jZXNzLnNlcnZpY2UnO1xuaW1wb3J0IHtOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZ1Rva2VuLCBVc2VyUHJvdmlkZWRDb25maWdUb2tlbn0gZnJvbSAnLi90b2tlbnMnO1xuLy8gaW50ZXJmYWNlc1xuLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBFeHBvcnQgbW9kdWxlJ3MgcHVibGljIEFQSVxuLy8gY29tcG9uZW50c1xuZXhwb3J0IHtMZWdhbGl0eURpYWxvZ0NvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL2xlZ2FsaXR5LWRpYWxvZy9sZWdhbGl0eS1kaWFsb2cuY29tcG9uZW50JztcbmV4cG9ydCB7TGlua01lbnVJdGVtLCBOZ3hBdXRoRmlyZWJhc2V1aUF2YXRhckNvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL25neC1hdXRoLWZpcmViYXNldWktYXZhdGFyL25neC1hdXRoLWZpcmViYXNldWktYXZhdGFyLmNvbXBvbmVudCc7XG5leHBvcnQge1VzZXJDb21wb25lbnR9IGZyb20gJy4vY29tcG9uZW50cy9uZ3gtYXV0aC1maXJlYmFzZXVpLXVzZXIvdXNlci5jb21wb25lbnQnO1xuZXhwb3J0IHtBdXRoQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvbmd4LWF1dGgtZmlyZWJhc2V1aS9hdXRoLmNvbXBvbmVudCc7XG5leHBvcnQge0F1dGhQcm92aWRlcnNDb21wb25lbnQsIExheW91dCwgVGhlbWV9IGZyb20gJy4vY29tcG9uZW50cy9wcm92aWRlcnMvYXV0aC5wcm92aWRlcnMuY29tcG9uZW50JztcbmV4cG9ydCB7Tmd4QXV0aEZpcmViYXNldWlMb2dpbkNvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL25neC1hdXRoLWZpcmViYXNldWktbG9naW4vbmd4LWF1dGgtZmlyZWJhc2V1aS1sb2dpbi5jb21wb25lbnQnO1xuZXhwb3J0IHtOZ3hBdXRoRmlyZWJhc2V1aVJlZ2lzdGVyQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvbmd4LWF1dGgtZmlyZWJhc2V1aS1yZWdpc3Rlci9uZ3gtYXV0aC1maXJlYmFzZXVpLXJlZ2lzdGVyLmNvbXBvbmVudCc7XG5cblxuLy8gZ3VhcmRzXG5leHBvcnQge0xvZ2dlZEluR3VhcmR9IGZyb20gJy4vZ3VhcmRzL2xvZ2dlZC1pbi5ndWFyZCc7XG4vLyBpbnRlcmZhY2VzXG5leHBvcnQge05neEF1dGhGaXJlYmFzZVVJQ29uZmlnfSBmcm9tICcuL2ludGVyZmFjZXMvY29uZmlnLmludGVyZmFjZSc7XG4vLyBzZXJ2aWNlc1xuZXhwb3J0IHtBdXRoUHJvY2Vzc1NlcnZpY2UsIEF1dGhQcm92aWRlcn0gZnJvbSAnLi9zZXJ2aWNlcy9hdXRoLXByb2Nlc3Muc2VydmljZSc7XG5leHBvcnQge0ZpcmVzdG9yZVN5bmNTZXJ2aWNlfSBmcm9tICcuL3NlcnZpY2VzL2ZpcmVzdG9yZS1zeW5jLnNlcnZpY2UnO1xuXG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgLy8gSFRUUFxuICAgIFJvdXRlck1vZHVsZSxcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICAgIC8vIEZMRVhfTEFZT1VUXG4gICAgRmxleExheW91dE1vZHVsZSxcbiAgICAvLyBGT1JNU1xuICAgIEZvcm1zTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgLy8gTUFURVJJQUwyXG4gICAgTWF0VGFic01vZHVsZSxcbiAgICBNYXRDYXJkTW9kdWxlLFxuICAgIE1hdElucHV0TW9kdWxlLFxuICAgIE1hdEJ1dHRvbk1vZHVsZSxcbiAgICBNYXRJY29uTW9kdWxlLFxuICAgIE1hdFNuYWNrQmFyTW9kdWxlLFxuICAgIE1hdERpdmlkZXJNb2R1bGUsXG4gICAgTWF0Q2hpcHNNb2R1bGUsXG4gICAgTWF0VG9vbHRpcE1vZHVsZSxcbiAgICBNYXREaWFsb2dNb2R1bGUsXG4gICAgTWF0Q2hlY2tib3hNb2R1bGUsXG4gICAgTWF0UHJvZ3Jlc3NTcGlubmVyTW9kdWxlLFxuICAgIE1hdFByb2dyZXNzQmFyTW9kdWxlLFxuICAgIE1hdERpYWxvZ01vZHVsZSxcbiAgICBNYXRNZW51TW9kdWxlLFxuICAgIC8vIEFOR1VMQVIgTUFURVJJQUwgRVhURU5TSU9OU1xuICAgIE1hdFBhc3N3b3JkU3RyZW5ndGhNb2R1bGUsXG4gICAgLy8gQU5HVUxBUkZJUkUyXG4gICAgQW5ndWxhckZpcmVBdXRoTW9kdWxlLFxuICAgIEFuZ3VsYXJGaXJlc3RvcmVNb2R1bGUsXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBBdXRoQ29tcG9uZW50LFxuICAgIFVzZXJDb21wb25lbnQsXG4gICAgTmd4QXV0aEZpcmViYXNldWlBdmF0YXJDb21wb25lbnQsXG4gICAgQXV0aFByb3ZpZGVyc0NvbXBvbmVudCxcbiAgICBFbWFpbENvbmZpcm1hdGlvbkNvbXBvbmVudCxcbiAgICAvLyBMb2dnZWRJbkd1YXJkLFxuICAgIEFuZ3VsYXJGaXJlQXV0aE1vZHVsZSxcbiAgICBBbmd1bGFyRmlyZXN0b3JlTW9kdWxlLFxuICAgIE5neEF1dGhGaXJlYmFzZXVpTG9naW5Db21wb25lbnQsXG4gICAgTmd4QXV0aEZpcmViYXNldWlSZWdpc3RlckNvbXBvbmVudFxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBBdXRoQ29tcG9uZW50LFxuICAgIFVzZXJDb21wb25lbnQsXG4gICAgTmd4QXV0aEZpcmViYXNldWlBdmF0YXJDb21wb25lbnQsXG4gICAgQXV0aFByb3ZpZGVyc0NvbXBvbmVudCxcbiAgICBFbWFpbENvbmZpcm1hdGlvbkNvbXBvbmVudCxcbiAgICBMZWdhbGl0eURpYWxvZ0NvbXBvbmVudCxcbiAgICBOZ3hBdXRoRmlyZWJhc2V1aUxvZ2luQ29tcG9uZW50LFxuICAgIE5neEF1dGhGaXJlYmFzZXVpUmVnaXN0ZXJDb21wb25lbnRcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgVXNlckNvbXBvbmVudCxcbiAgICBMZWdhbGl0eURpYWxvZ0NvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE5neEF1dGhGaXJlYmFzZVVJTW9kdWxlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpY29uUmVnaXN0cnk6IE1hdEljb25SZWdpc3RyeSwgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplciwgYXV0aDogQXV0aFByb2Nlc3NTZXJ2aWNlKSB7XG4gICAgYXV0aC5saXN0ZW5Ub1VzZXJFdmVudHMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyUHJvdmlkZXJJY29ucygpO1xuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoXG4gICAgY29uZmlnRmFjdG9yeTogRmlyZWJhc2VBcHBDb25maWcsXG4gICAgYXBwTmFtZUZhY3Rvcnk6ICgpID0+IHN0cmluZyB8IHVuZGVmaW5lZCA9ICgpID0+IHVuZGVmaW5lZCxcbiAgICBjb25maWc6IE5neEF1dGhGaXJlYmFzZVVJQ29uZmlnID0ge31cbiAgKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hBdXRoRmlyZWJhc2VVSU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczpcbiAgICAgICAgW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEZJUkVCQVNFX09QVElPTlMsXG4gICAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnRmFjdG9yeVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogRklSRUJBU0VfQVBQX05BTUUsXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBhcHBOYW1lRmFjdG9yeVxuICAgICAgICAgIH0sXG4gICAgICAgICAge3Byb3ZpZGU6IFVzZXJQcm92aWRlZENvbmZpZ1Rva2VuLCB1c2VWYWx1ZTogY29uZmlnfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZ1Rva2VuLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogbmd4QXV0aEZpcmViYXNlVUlDb25maWdGYWN0b3J5LFxuICAgICAgICAgICAgZGVwczogW1VzZXJQcm92aWRlZENvbmZpZ1Rva2VuXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgQXV0aFByb2Nlc3NTZXJ2aWNlLFxuICAgICAgICAgIEZpcmVzdG9yZVN5bmNTZXJ2aWNlLFxuICAgICAgICAgIExvZ2dlZEluR3VhcmRcbiAgICAgICAgXVxuICAgIH07XG4gIH1cblxuICByZWdpc3RlclByb3ZpZGVySWNvbnMoKSB7XG4gICAgdGhpcy5pY29uUmVnaXN0cnlcbiAgICAgIC5hZGRTdmdJY29uKCdnb29nbGUnLCB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoJy9hc3NldHMvbWRpL2dvb2dsZS5zdmcnKSlcbiAgICAgIC5hZGRTdmdJY29uKCdhcHBsZScsIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybCgnL2Fzc2V0cy9tZGkvYXBwbGUuc3ZnJykpXG4gICAgICAuYWRkU3ZnSWNvbignZ29vZ2xlLWNvbG9yZWQnLCB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoJy9hc3NldHMvZ29vZ2xlLnN2ZycpKVxuICAgICAgLmFkZFN2Z0ljb24oJ2ZhY2Vib29rJywgdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKCcvYXNzZXRzL21kaS9mYWNlYm9vay5zdmcnKSlcbiAgICAgIC5hZGRTdmdJY29uKCd0d2l0dGVyJywgdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKCcvYXNzZXRzL21kaS90d2l0dGVyLnN2ZycpKVxuICAgICAgLmFkZFN2Z0ljb24oJ2dpdGh1YicsIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybCgnL2Fzc2V0cy9tZGkvZ2l0aHViLWNpcmNsZS5zdmcnKSlcbiAgICAgIC5hZGRTdmdJY29uKCdtaWNyb3NvZnQnLCB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoJy9hc3NldHMvbWRpL21pY3Jvc29mdC5zdmcnKSlcbiAgICAgIC5hZGRTdmdJY29uKCd5YWhvbycsIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybCgnL2Fzc2V0cy9tZGkveWFob28uc3ZnJykpXG4gICAgICAuYWRkU3ZnSWNvbigncGhvbmUnLCB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoJy9hc3NldHMvcGhvbmUuc3ZnJykpO1xuICB9XG59XG4iXX0=