// import * as firebase from 'firebase';
export var defaultAuthFirebaseUIConfig = {
    // authMethod: 'redirect',
    // authProviders: [new GoogleAuthProvider(), new FacebookAuthProvider(), new TwitterAuthProvider(), new GithubAuthProvider()],
    enableFirestoreSync: true,
    toastMessageOnAuthSuccess: true,
    toastMessageOnAuthError: true,
    authGuardFallbackURL: '/',
    authGuardLoggedInURL: '/',
    // Password length min/max in forms independently of each componenet min/max.
    // `min/max` input parameters in components should be within this range.
    passwordMaxLength: 60,
    passwordMinLength: 8,
    // Same as password but for the name
    nameMaxLength: 50,
    nameMinLength: 2,
    // If set, sign-in/up form is not available until email has been verified.
    // Plus protected routes are still protected even though user is connected.
    guardProtectedRoutesUntilEmailIsVerified: true,
    // Default to email verification on
    enableEmailVerification: true
};
// Merge default config with user provided config.
export function ngxAuthFirebaseUIConfigFactory(userProvidedConfig) {
    return Object.assign({}, defaultAuthFirebaseUIConfig, userProvidedConfig);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hdXRoLWZpcmViYXNldWkvIiwic291cmNlcyI6WyJsaWIvaW50ZXJmYWNlcy9jb25maWcuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdDQUF3QztBQWlDeEMsTUFBTSxDQUFDLElBQU0sMkJBQTJCLEdBQTRCO0lBQ2xFLDBCQUEwQjtJQUMxQiw4SEFBOEg7SUFDOUgsbUJBQW1CLEVBQUUsSUFBSTtJQUN6Qix5QkFBeUIsRUFBRSxJQUFJO0lBQy9CLHVCQUF1QixFQUFFLElBQUk7SUFDN0Isb0JBQW9CLEVBQUUsR0FBRztJQUN6QixvQkFBb0IsRUFBRSxHQUFHO0lBRXpCLDZFQUE2RTtJQUM3RSx3RUFBd0U7SUFDeEUsaUJBQWlCLEVBQUUsRUFBRTtJQUNyQixpQkFBaUIsRUFBRSxDQUFDO0lBRXBCLG9DQUFvQztJQUNwQyxhQUFhLEVBQUUsRUFBRTtJQUNqQixhQUFhLEVBQUUsQ0FBQztJQUVoQiwwRUFBMEU7SUFDMUUsMkVBQTJFO0lBQzNFLHdDQUF3QyxFQUFFLElBQUk7SUFFOUMsbUNBQW1DO0lBQ25DLHVCQUF1QixFQUFFLElBQUk7Q0FDOUIsQ0FBQztBQUVGLGtEQUFrRDtBQUNsRCxNQUFNLFVBQVUsOEJBQThCLENBQUMsa0JBQTJDO0lBQ3hGLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsMkJBQTJCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQUM1RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0ICogYXMgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5neEF1dGhGaXJlYmFzZVVJQ29uZmlnIHtcbiAgLy8gYXV0aE5leHRVUkw/OiBzdHJpbmcsIC8vIHBvcHVwIG9yIHJlZGlyZWN0XG4gIC8vIHRvc1VybD86IHN0cmluZywgLy8gdGVybSBvZiBzZXJ2aWNlcyB1cmxcbiAgLy8gcHBVcmw/OiBzdHJpbmcsIC8vIHByaXZhY3kgcG9saWN5IHVybFxuICAvLyBhdXRoUHJvdmlkZXJzPzogQXJyYXk8QXV0aFByb3ZpZGVyPixcbiAgLy8gbGFuZ3VhZ2VDb2RlPzogc3RyaW5nLCAvLyB0b2RvOiAyOC4zLjE4XG4gIGF1dGhHdWFyZEZhbGxiYWNrVVJMPzogc3RyaW5nO1xuICBhdXRoR3VhcmRMb2dnZWRJblVSTD86IHN0cmluZztcbiAgZW5hYmxlRmlyZXN0b3JlU3luYz86IGJvb2xlYW47XG5cbiAgLy8gVG9hc3RzXG4gIHRvYXN0TWVzc2FnZU9uQXV0aFN1Y2Nlc3M/OiBib29sZWFuO1xuICB0b2FzdE1lc3NhZ2VPbkF1dGhFcnJvcj86IGJvb2xlYW47XG5cbiAgLy8gUGFzc3dvcmQgbGVuZ3RoIG1pbi9tYXggaW4gZm9ybXMgaW5kZXBlbmRlbnRseSBvZiBlYWNoIGNvbXBvbmVuZXQgbWluL21heC5cbiAgLy8gYG1pbi9tYXhgIGlucHV0IHBhcmFtZXRlcnMgaW4gY29tcG9uZW50cyBzaG91bGQgYmUgd2l0aGluIHRoaXMgcmFuZ2UuXG4gIHBhc3N3b3JkTWF4TGVuZ3RoPzogbnVtYmVyO1xuICBwYXNzd29yZE1pbkxlbmd0aD86IG51bWJlcjtcblxuICAvLyBTYW1lIGFzIHBhc3N3b3JkIGJ1dCBmb3IgdGhlIG5hbWVcbiAgbmFtZU1heExlbmd0aD86IG51bWJlcjtcbiAgbmFtZU1pbkxlbmd0aD86IG51bWJlcjtcblxuICAvLyBJZiBzZXQsIHNpZ24taW4vdXAgZm9ybSBpcyBub3QgYXZhaWxhYmxlIHVudGlsIGVtYWlsIGhhcyBiZWVuIHZlcmlmaWVkLlxuICAvLyBQbHVzIHByb3RlY3RlZCByb3V0ZXMgYXJlIHN0aWxsIHByb3RlY3RlZCBldmVuIHRob3VnaCB1c2VyIGlzIGNvbm5lY3RlZC5cbiAgZ3VhcmRQcm90ZWN0ZWRSb3V0ZXNVbnRpbEVtYWlsSXNWZXJpZmllZD86IGJvb2xlYW47XG5cbiAgLy8gQ29udHJvbCB3aGV0aGVyIG9yIG5vdCBlbWFpbCB2ZXJpZmljYXRpb24gaXMgdXNlZFxuICBlbmFibGVFbWFpbFZlcmlmaWNhdGlvbj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0QXV0aEZpcmViYXNlVUlDb25maWc6IE5neEF1dGhGaXJlYmFzZVVJQ29uZmlnID0ge1xuICAvLyBhdXRoTWV0aG9kOiAncmVkaXJlY3QnLFxuICAvLyBhdXRoUHJvdmlkZXJzOiBbbmV3IEdvb2dsZUF1dGhQcm92aWRlcigpLCBuZXcgRmFjZWJvb2tBdXRoUHJvdmlkZXIoKSwgbmV3IFR3aXR0ZXJBdXRoUHJvdmlkZXIoKSwgbmV3IEdpdGh1YkF1dGhQcm92aWRlcigpXSxcbiAgZW5hYmxlRmlyZXN0b3JlU3luYzogdHJ1ZSxcbiAgdG9hc3RNZXNzYWdlT25BdXRoU3VjY2VzczogdHJ1ZSxcbiAgdG9hc3RNZXNzYWdlT25BdXRoRXJyb3I6IHRydWUsXG4gIGF1dGhHdWFyZEZhbGxiYWNrVVJMOiAnLycsXG4gIGF1dGhHdWFyZExvZ2dlZEluVVJMOiAnLycsXG5cbiAgLy8gUGFzc3dvcmQgbGVuZ3RoIG1pbi9tYXggaW4gZm9ybXMgaW5kZXBlbmRlbnRseSBvZiBlYWNoIGNvbXBvbmVuZXQgbWluL21heC5cbiAgLy8gYG1pbi9tYXhgIGlucHV0IHBhcmFtZXRlcnMgaW4gY29tcG9uZW50cyBzaG91bGQgYmUgd2l0aGluIHRoaXMgcmFuZ2UuXG4gIHBhc3N3b3JkTWF4TGVuZ3RoOiA2MCxcbiAgcGFzc3dvcmRNaW5MZW5ndGg6IDgsXG5cbiAgLy8gU2FtZSBhcyBwYXNzd29yZCBidXQgZm9yIHRoZSBuYW1lXG4gIG5hbWVNYXhMZW5ndGg6IDUwLFxuICBuYW1lTWluTGVuZ3RoOiAyLFxuXG4gIC8vIElmIHNldCwgc2lnbi1pbi91cCBmb3JtIGlzIG5vdCBhdmFpbGFibGUgdW50aWwgZW1haWwgaGFzIGJlZW4gdmVyaWZpZWQuXG4gIC8vIFBsdXMgcHJvdGVjdGVkIHJvdXRlcyBhcmUgc3RpbGwgcHJvdGVjdGVkIGV2ZW4gdGhvdWdoIHVzZXIgaXMgY29ubmVjdGVkLlxuICBndWFyZFByb3RlY3RlZFJvdXRlc1VudGlsRW1haWxJc1ZlcmlmaWVkOiB0cnVlLFxuXG4gIC8vIERlZmF1bHQgdG8gZW1haWwgdmVyaWZpY2F0aW9uIG9uXG4gIGVuYWJsZUVtYWlsVmVyaWZpY2F0aW9uOiB0cnVlXG59O1xuXG4vLyBNZXJnZSBkZWZhdWx0IGNvbmZpZyB3aXRoIHVzZXIgcHJvdmlkZWQgY29uZmlnLlxuZXhwb3J0IGZ1bmN0aW9uIG5neEF1dGhGaXJlYmFzZVVJQ29uZmlnRmFjdG9yeSh1c2VyUHJvdmlkZWRDb25maWc6IE5neEF1dGhGaXJlYmFzZVVJQ29uZmlnKTogTmd4QXV0aEZpcmViYXNlVUlDb25maWcge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdEF1dGhGaXJlYmFzZVVJQ29uZmlnLCB1c2VyUHJvdmlkZWRDb25maWcpO1xufVxuIl19