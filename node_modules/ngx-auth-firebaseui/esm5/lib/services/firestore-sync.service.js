import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/firestore';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire/firestore";
export var collections = {
    users: 'users',
};
var FirestoreSyncService = /** @class */ (function () {
    function FirestoreSyncService(afs) {
        this.afs = afs;
        // this.afs.firestore.settings({timestampsInSnapshots: true});
    }
    // get timestamp() {
    //     return firebase.firestore.FieldValue.serverTimestamp();
    // }
    FirestoreSyncService.prototype.getUserDocRefByUID = function (uid) {
        return this.afs.doc(collections.users + "/" + uid);
    };
    FirestoreSyncService.prototype.deleteUserData = function (uid) {
        var userRef = this.getUserDocRefByUID(uid);
        return userRef.delete();
    };
    FirestoreSyncService.prototype.updateUserData = function (user) {
        // Sets user$ data to firestore on login
        var userRef = this.getUserDocRefByUID(user.uid);
        var data = {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName,
            photoURL: user.photoURL,
            phoneNumber: user.phoneNumber,
            providerId: user.providerId
        };
        return userRef.set(data, { merge: true });
    };
    FirestoreSyncService.ctorParameters = function () { return [
        { type: AngularFirestore }
    ]; };
    FirestoreSyncService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FirestoreSyncService_Factory() { return new FirestoreSyncService(i0.ɵɵinject(i1.AngularFirestore)); }, token: FirestoreSyncService, providedIn: "root" });
    FirestoreSyncService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], FirestoreSyncService);
    return FirestoreSyncService;
}());
export { FirestoreSyncService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZXN0b3JlLXN5bmMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hdXRoLWZpcmViYXNldWkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZmlyZXN0b3JlLXN5bmMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsd0JBQXdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQzs7O0FBR25GLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRztJQUN6QixLQUFLLEVBQUUsT0FBTztDQUNmLENBQUM7QUFLRjtJQUVFLDhCQUFtQixHQUFxQjtRQUFyQixRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUN0Qyw4REFBOEQ7SUFDaEUsQ0FBQztJQUVELG9CQUFvQjtJQUNwQiw4REFBOEQ7SUFDOUQsSUFBSTtJQUVHLGlEQUFrQixHQUF6QixVQUEwQixHQUFXO1FBQ25DLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUksV0FBVyxDQUFDLEtBQUssU0FBSSxHQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sNkNBQWMsR0FBckIsVUFBc0IsR0FBVztRQUMvQixJQUFNLE9BQU8sR0FBdUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pGLE9BQU8sT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFHTSw2Q0FBYyxHQUFyQixVQUFzQixJQUFjO1FBQ2xDLHdDQUF3QztRQUN4QyxJQUFNLE9BQU8sR0FBdUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0RixJQUFNLElBQUksR0FBYTtZQUNyQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzVCLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7Z0JBOUJ1QixnQkFBZ0I7OztJQUY3QixvQkFBb0I7UUFIaEMsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLG9CQUFvQixDQWlDaEM7K0JBNUNEO0NBNENDLEFBakNELElBaUNDO1NBakNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FuZ3VsYXJGaXJlc3RvcmUsIEFuZ3VsYXJGaXJlc3RvcmVEb2N1bWVudH0gZnJvbSAnQGFuZ3VsYXIvZmlyZS9maXJlc3RvcmUnO1xuaW1wb3J0IHtVc2VySW5mb30gZnJvbSAnZmlyZWJhc2UnO1xuXG5leHBvcnQgY29uc3QgY29sbGVjdGlvbnMgPSB7XG4gIHVzZXJzOiAndXNlcnMnLFxufTtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRmlyZXN0b3JlU3luY1NlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBhZnM6IEFuZ3VsYXJGaXJlc3RvcmUpIHtcbiAgICAvLyB0aGlzLmFmcy5maXJlc3RvcmUuc2V0dGluZ3Moe3RpbWVzdGFtcHNJblNuYXBzaG90czogdHJ1ZX0pO1xuICB9XG5cbiAgLy8gZ2V0IHRpbWVzdGFtcCgpIHtcbiAgLy8gICAgIHJldHVybiBmaXJlYmFzZS5maXJlc3RvcmUuRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXAoKTtcbiAgLy8gfVxuXG4gIHB1YmxpYyBnZXRVc2VyRG9jUmVmQnlVSUQodWlkOiBzdHJpbmcpOiBBbmd1bGFyRmlyZXN0b3JlRG9jdW1lbnQ8VXNlckluZm8+IHtcbiAgICByZXR1cm4gdGhpcy5hZnMuZG9jKGAke2NvbGxlY3Rpb25zLnVzZXJzfS8ke3VpZH1gKTtcbiAgfVxuXG4gIHB1YmxpYyBkZWxldGVVc2VyRGF0YSh1aWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgdXNlclJlZjogQW5ndWxhckZpcmVzdG9yZURvY3VtZW50PFVzZXJJbmZvPiA9IHRoaXMuZ2V0VXNlckRvY1JlZkJ5VUlEKHVpZCk7XG4gICAgcmV0dXJuIHVzZXJSZWYuZGVsZXRlKCk7XG4gIH1cblxuXG4gIHB1YmxpYyB1cGRhdGVVc2VyRGF0YSh1c2VyOiBVc2VySW5mbyk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gU2V0cyB1c2VyJCBkYXRhIHRvIGZpcmVzdG9yZSBvbiBsb2dpblxuICAgIGNvbnN0IHVzZXJSZWY6IEFuZ3VsYXJGaXJlc3RvcmVEb2N1bWVudDxVc2VySW5mbz4gPSB0aGlzLmdldFVzZXJEb2NSZWZCeVVJRCh1c2VyLnVpZCk7XG4gICAgY29uc3QgZGF0YTogVXNlckluZm8gPSB7XG4gICAgICB1aWQ6IHVzZXIudWlkLFxuICAgICAgZW1haWw6IHVzZXIuZW1haWwsXG4gICAgICBkaXNwbGF5TmFtZTogdXNlci5kaXNwbGF5TmFtZSxcbiAgICAgIHBob3RvVVJMOiB1c2VyLnBob3RvVVJMLFxuICAgICAgcGhvbmVOdW1iZXI6IHVzZXIucGhvbmVOdW1iZXIsXG4gICAgICBwcm92aWRlcklkOiB1c2VyLnByb3ZpZGVySWRcbiAgICB9O1xuICAgIHJldHVybiB1c2VyUmVmLnNldChkYXRhLCB7bWVyZ2U6IHRydWV9KTtcbiAgfVxufVxuIl19