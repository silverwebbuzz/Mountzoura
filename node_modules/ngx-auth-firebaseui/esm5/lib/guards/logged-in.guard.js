import { __decorate, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';
import { map } from 'rxjs/operators';
import { NgxAuthFirebaseUIConfigToken } from '../tokens';
import { AuthProcessService } from '../services/auth-process.service';
import * as i0 from "@angular/core";
import * as i1 from "../tokens/index";
import * as i2 from "@angular/router";
import * as i3 from "../services/auth-process.service";
var LoggedInGuard = /** @class */ (function () {
    function LoggedInGuard(config, router, authProcess) {
        this.config = config;
        this.router = router;
        this.authProcess = authProcess;
    }
    LoggedInGuard.prototype.canActivate = function (route, state) {
        var _this = this;
        return this.authProcess.afa.user.pipe(map(function (user) {
            if (user) {
                if (_this.config.guardProtectedRoutesUntilEmailIsVerified && !user.emailVerified && !user.isAnonymous) {
                    if (_this.config.authGuardFallbackURL) {
                        _this.router.navigate(["" + _this.config.authGuardFallbackURL], { queryParams: { redirectUrl: state.url } });
                    }
                    return false;
                }
                else {
                    return true;
                }
            }
            else {
                if (_this.config.authGuardFallbackURL) {
                    _this.router.navigate(["/" + _this.config.authGuardFallbackURL], { queryParams: { redirectUrl: state.url } });
                }
                return false;
            }
        }));
    };
    LoggedInGuard.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NgxAuthFirebaseUIConfigToken,] }] },
        { type: Router },
        { type: AuthProcessService }
    ]; };
    LoggedInGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoggedInGuard_Factory() { return new LoggedInGuard(i0.ɵɵinject(i1.NgxAuthFirebaseUIConfigToken), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AuthProcessService)); }, token: LoggedInGuard, providedIn: "root" });
    LoggedInGuard = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Inject(NgxAuthFirebaseUIConfigToken))
    ], LoggedInGuard);
    return LoggedInGuard;
}());
export { LoggedInGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VkLWluLmd1YXJkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWF1dGgtZmlyZWJhc2V1aS8iLCJzb3VyY2VzIjpbImxpYi9ndWFyZHMvbG9nZ2VkLWluLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsc0JBQXNCLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRWpHLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuQyxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdkQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sa0NBQWtDLENBQUM7Ozs7O0FBS3BFO0lBQ0UsdUJBRVUsTUFBK0IsRUFDL0IsTUFBYyxFQUNkLFdBQStCO1FBRi9CLFdBQU0sR0FBTixNQUFNLENBQXlCO1FBQy9CLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7SUFFekMsQ0FBQztJQUVELG1DQUFXLEdBQVgsVUFBWSxLQUE2QixFQUFFLEtBQTBCO1FBQXJFLGlCQW9CQztRQW5CQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ25DLEdBQUcsQ0FBQyxVQUFBLElBQUk7WUFDTixJQUFJLElBQUksRUFBRTtnQkFDUixJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsd0NBQXdDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtvQkFDcEcsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFO3dCQUNwQyxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBc0IsQ0FBQyxFQUFFLEVBQUMsV0FBVyxFQUFFLEVBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUMsRUFBQyxDQUFDLENBQUM7cUJBQ3hHO29CQUNELE9BQU8sS0FBSyxDQUFDO2lCQUNkO3FCQUFNO29CQUNMLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2FBQ0Y7aUJBQU07Z0JBQ0wsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFO29CQUNwQyxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBc0IsQ0FBQyxFQUFFLEVBQUMsV0FBVyxFQUFFLEVBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUMsRUFBQyxDQUFDLENBQUM7aUJBQ3pHO2dCQUNELE9BQU8sS0FBSyxDQUFDO2FBQ2Q7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Z0RBM0JFLE1BQU0sU0FBQyw0QkFBNEI7Z0JBRXBCLE1BQU07Z0JBQ0Qsa0JBQWtCOzs7SUFMOUIsYUFBYTtRQUh6QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO1FBR0csV0FBQSxNQUFNLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtPQUY1QixhQUFhLENBOEJ6Qjt3QkF6Q0Q7Q0F5Q0MsQUE5QkQsSUE4QkM7U0E5QlksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ2FuQWN0aXZhdGUsIFJvdXRlciwgUm91dGVyU3RhdGVTbmFwc2hvdH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZ30gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQge05neEF1dGhGaXJlYmFzZVVJQ29uZmlnVG9rZW59IGZyb20gJy4uL3Rva2Vucyc7XG5pbXBvcnQge0F1dGhQcm9jZXNzU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvYXV0aC1wcm9jZXNzLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMb2dnZWRJbkd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KE5neEF1dGhGaXJlYmFzZVVJQ29uZmlnVG9rZW4pXG4gICAgcHJpdmF0ZSBjb25maWc6IE5neEF1dGhGaXJlYmFzZVVJQ29uZmlnLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSBhdXRoUHJvY2VzczogQXV0aFByb2Nlc3NTZXJ2aWNlXG4gICkge1xuICB9XG5cbiAgY2FuQWN0aXZhdGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aFByb2Nlc3MuYWZhLnVzZXIucGlwZShcbiAgICAgIG1hcCh1c2VyID0+IHtcbiAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICBpZiAodGhpcy5jb25maWcuZ3VhcmRQcm90ZWN0ZWRSb3V0ZXNVbnRpbEVtYWlsSXNWZXJpZmllZCAmJiAhdXNlci5lbWFpbFZlcmlmaWVkICYmICF1c2VyLmlzQW5vbnltb3VzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWcuYXV0aEd1YXJkRmFsbGJhY2tVUkwpIHtcbiAgICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW2Ake3RoaXMuY29uZmlnLmF1dGhHdWFyZEZhbGxiYWNrVVJMfWBdLCB7cXVlcnlQYXJhbXM6IHtyZWRpcmVjdFVybDogc3RhdGUudXJsfX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmF1dGhHdWFyZEZhbGxiYWNrVVJMKSB7XG4gICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbYC8ke3RoaXMuY29uZmlnLmF1dGhHdWFyZEZhbGxiYWNrVVJMfWBdLCB7cXVlcnlQYXJhbXM6IHtyZWRpcmVjdFVybDogc3RhdGUudXJsfX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19