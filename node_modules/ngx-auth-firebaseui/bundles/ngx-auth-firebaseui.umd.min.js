!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/router"),require("@angular/fire/auth"),require("@firebase/app"),require("@firebase/auth"),require("rxjs"),require("rxjs/operators"),require("@angular/fire/firestore"),require("@angular/material/snack-bar"),require("@angular/material/dialog"),require("@angular/common"),require("@angular/forms"),require("@angular/material/tabs"),require("@angular-material-extensions/password-strength"),require("@angular/animations"),require("@angular/common/http"),require("@angular/flex-layout"),require("@angular/fire"),require("@angular/material/button"),require("@angular/material/card"),require("@angular/material/checkbox"),require("@angular/material/chips"),require("@angular/material/divider"),require("@angular/material/icon"),require("@angular/material/input"),require("@angular/material/menu"),require("@angular/material/progress-bar"),require("@angular/material/progress-spinner"),require("@angular/material/tooltip"),require("@angular/platform-browser")):"function"==typeof define&&define.amd?define("ngx-auth-firebaseui",["exports","@angular/core","@angular/router","@angular/fire/auth","@firebase/app","@firebase/auth","rxjs","rxjs/operators","@angular/fire/firestore","@angular/material/snack-bar","@angular/material/dialog","@angular/common","@angular/forms","@angular/material/tabs","@angular-material-extensions/password-strength","@angular/animations","@angular/common/http","@angular/flex-layout","@angular/fire","@angular/material/button","@angular/material/card","@angular/material/checkbox","@angular/material/chips","@angular/material/divider","@angular/material/icon","@angular/material/input","@angular/material/menu","@angular/material/progress-bar","@angular/material/progress-spinner","@angular/material/tooltip","@angular/platform-browser"],e):e((t=t||self)["ngx-auth-firebaseui"]={},t.ng.core,t.ng.router,t.ng.fire.auth,t.app,null,t.rxjs,t.rxjs.operators,t.ng.fire.firestore,t.ng.material.snackBar,t.ng.material.dialog,t.ng.common,t.ng.forms,t.ng.material.tabs,t.passwordStrength,t.ng.animations,t.ng.common.http,t.ng.flexLayout,t.ng.fire,t.ng.material.button,t.ng.material.card,t.ng.material.checkbox,t.ng.material.chips,t.ng.material.divider,t.ng.material.icon,t.ng.material.input,t.ng.material.menu,t.ng.material.progressBar,t.ng.material.progressSpinner,t.ng.material.tooltip,t.ng.platformBrowser)}(this,(function(t,e,r,n,o,a,i,s,u,l,c,p,m,d,g,h,f,v,b,x,y,w,P,I,T,E,L,A,C,k,S){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var U;function F(t,e,r,n){var o,a=arguments.length,i=a<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,r,n);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(i=(a<3?o(i):a>3?o(e,r,i):o(e,r))||i);return a>3&&i&&Object.defineProperty(e,r,i),i}function R(t,e){return function(r,n){e(r,n,t)}}function M(t,e,r,n){return new(r||(r=Promise))((function(o,a){function i(t){try{u(n.next(t))}catch(t){a(t)}}function s(t){try{u(n.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,s)}u((n=n.apply(t,e||[])).next())}))}function O(t,e){var r,n,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,n=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(t){a=[6,t],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}(U=t.Accounts||(t.Accounts={})).NONE="account",U.CHECK="account-check",U.EDIT="account-edit",U.OFF="account-off",U.REMOVE="account-remove";var N,q={users:"users"},G=function(){function t(t){this.afs=t}return t.prototype.getUserDocRefByUID=function(t){return this.afs.doc(q.users+"/"+t)},t.prototype.deleteUserData=function(t){return this.getUserDocRefByUID(t).delete()},t.prototype.updateUserData=function(t){var e=this.getUserDocRefByUID(t.uid),r={uid:t.uid,email:t.email,displayName:t.displayName,photoURL:t.photoURL,phoneNumber:t.phoneNumber,providerId:t.providerId};return e.set(r,{merge:!0})},t.ctorParameters=function(){return[{type:u.AngularFirestore}]},t.ɵprov=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(u.AngularFirestore))},token:t,providedIn:"root"}),t=F([e.Injectable({providedIn:"root"})],t)}(),B=new e.InjectionToken("NgxAuthFirebaseUIConfigToken"),D=new e.InjectionToken("UserProvidedConfigToken"),V=new o.firebase.auth.FacebookAuthProvider,j=new o.firebase.auth.GoogleAuthProvider,_=new o.firebase.auth.OAuthProvider("apple.com"),z=new o.firebase.auth.TwitterAuthProvider,Y=new o.firebase.auth.GithubAuthProvider,W=new o.firebase.auth.OAuthProvider("microsoft.com"),H=new o.firebase.auth.OAuthProvider("yahoo.com");(N=t.AuthProvider||(t.AuthProvider={})).ALL="all",N.ANONYMOUS="anonymous",N.EmailAndPassword="firebase",N.Google="google",N.Apple="apple",N.Facebook="facebook",N.Twitter="twitter",N.Github="github",N.Microsoft="microsoft",N.Yahoo="yahoo",N.PhoneNumber="phoneNumber";var $,K,X=function(){function r(t,r,n,o,a){this.afa=t,this.config=r,this.snackBar=n,this.fireStoreService=o,this.matSnackBarConfig=a,this.onSuccessEmitter=new e.EventEmitter,this.onErrorEmitter=new e.EventEmitter,this._user$=new i.BehaviorSubject(null)}return Object.defineProperty(r.prototype,"user$",{get:function(){return this._user$.asObservable()},enumerable:!0,configurable:!0}),r.prototype.listenToUserEvents=function(){var t=this;this.afa.user.subscribe((function(e){t._user$.next(e),t.user=e}))},r.prototype.resetPassword=function(t){return M(this,void 0,void 0,(function(){var e;return O(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),console.log("Password reset email sent"),[4,this.afa.sendPasswordResetEmail(t)];case 1:return[2,r.sent()];case 2:return e=r.sent(),[2,this.notifyError(e)];case 3:return[2]}}))}))},r.prototype.signInWith=function(e,r){return M(this,void 0,void 0,(function(){var n,o;return O(this,(function(a){switch(a.label){case 0:switch(a.trys.push([0,23,,24]),n=void 0,e){case t.AuthProvider.ANONYMOUS:return[3,1];case t.AuthProvider.EmailAndPassword:return[3,3];case t.AuthProvider.Google:return[3,5];case t.AuthProvider.Apple:return[3,7];case t.AuthProvider.Facebook:return[3,9];case t.AuthProvider.Twitter:return[3,11];case t.AuthProvider.Github:return[3,13];case t.AuthProvider.Microsoft:return[3,15];case t.AuthProvider.Yahoo:return[3,17];case t.AuthProvider.PhoneNumber:return[3,19]}return[3,20];case 1:return[4,this.afa.signInAnonymously()];case 2:return n=a.sent(),[3,21];case 3:return[4,this.afa.signInWithEmailAndPassword(r.email,r.password)];case 4:return n=a.sent(),[3,21];case 5:return[4,this.afa.signInWithPopup(j)];case 6:return n=a.sent(),[3,21];case 7:return[4,this.afa.signInWithPopup(_)];case 8:return n=a.sent(),[3,21];case 9:return[4,this.afa.signInWithPopup(V)];case 10:return n=a.sent(),[3,21];case 11:return[4,this.afa.signInWithPopup(z)];case 12:return n=a.sent(),[3,21];case 13:return[4,this.afa.signInWithPopup(Y)];case 14:return n=a.sent(),[3,21];case 15:return[4,this.afa.signInWithPopup(W)];case 16:return n=a.sent(),[3,21];case 17:return[4,this.afa.signInWithPopup(H)];case 18:return n=a.sent(),[3,21];case 19:return[3,21];case 20:throw new Error(t.AuthProvider[e]+" is not available as auth provider");case 21:return[4,this.handleSuccess(n)];case 22:return a.sent(),[3,24];case 23:return o=a.sent(),this.handleError(o),[3,24];case 24:return[2]}}))}))},r.prototype.signUp=function(t,e){return M(this,void 0,void 0,(function(){var r,n,o;return O(this,(function(a){switch(a.label){case 0:return a.trys.push([0,8,,9]),[4,this.afa.createUserWithEmailAndPassword(e.email,e.password)];case 1:return r=a.sent(),n=r.user,[4,this.updateProfile(t,n.photoURL)];case 2:return a.sent(),this.config.enableFirestoreSync?[4,this.fireStoreService.getUserDocRefByUID(n.uid).set({uid:n.uid,displayName:t,email:n.email,photoURL:n.photoURL})]:[3,4];case 3:a.sent(),a.label=4;case 4:return this.config.enableEmailVerification?[4,n.sendEmailVerification()]:[3,6];case 5:a.sent(),a.label=6;case 6:return this.emailConfirmationSent=!0,this.emailToConfirm=e.email,[4,this.handleSuccess(r)];case 7:return a.sent(),[3,9];case 8:return o=a.sent(),this.handleError(o),[3,9];case 9:return[2]}}))}))},r.prototype.sendNewVerificationEmail=function(){return M(this,void 0,void 0,(function(){return O(this,(function(t){return this.user?[2,this.user.sendEmailVerification()]:[2,Promise.reject(new Error("No signed in user"))]}))}))},r.prototype.signOut=function(){return M(this,void 0,void 0,(function(){var t;return O(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,this.afa.signOut()];case 1:return e.sent(),[3,3];case 2:return t=e.sent(),this.notifyError(t),[3,3];case 3:return[2]}}))}))},r.prototype.updateProfile=function(t,e){return this.afa.currentUser.then((function(r){return e?r.updateProfile({displayName:t,photoURL:e}):r.updateProfile({displayName:t})}))},r.prototype.parseUserInfo=function(t){return{uid:t.uid,displayName:t.displayName,email:t.email,phoneNumber:t.phoneNumber,photoURL:t.photoURL,providerId:t.providerData.length>0?t.providerData[0].providerId:null}},r.prototype.getUserPhotoUrl=function(){var e=this;return this._user$.pipe(s.map((function(r){return r?r.photoURL?r.photoURL:r.emailVerified?e.getPhotoPath(t.Accounts.CHECK):r.isAnonymous?e.getPhotoPath(t.Accounts.OFF):e.getPhotoPath(t.Accounts.NONE):null})))},r.prototype.getPhotoPath=function(t){return"assets/user/"+t+".svg"},r.prototype.signInWithPhoneNumber=function(){},r.prototype.handleSuccess=function(t){return M(this,void 0,void 0,(function(){var e,r;return O(this,(function(n){switch(n.label){case 0:if(this.onSuccessEmitter.next(t.user),!this.config.enableFirestoreSync)return[3,4];n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.fireStoreService.updateUserData(this.parseUserInfo(t.user))];case 2:return n.sent(),[3,4];case 3:return e=n.sent(),console.error("Error occurred while updating user data with firestore: "+e),[3,4];case 4:return this.config.toastMessageOnAuthSuccess&&(r="Hello "+(t.user.displayName?t.user.displayName:"")+"!",this.showToast(this.messageOnAuthSuccess||r)),[2]}}))}))},r.prototype.handleError=function(t){this.notifyError(t),console.error(t)},r.prototype.reloadUserInfo=function(){return this._user$.pipe(s.take(1)).subscribe((function(t){return t&&t.reload()}))},r.prototype.getMessageOnAuthError=function(t){return t.toString()||"Sorry, something went wrong. Please retry later."},r.prototype.showToast=function(t){t&&this.snackBar.open(t,this.matSnackBarConfig.duration?null:"OK")},r.prototype.showErrorToast=function(t){this.config.toastMessageOnAuthError&&this.showToast(this.getMessageOnAuthError(t))},r.prototype.notifyError=function(t){this.onErrorEmitter.emit(t),this.showErrorToast(t)},r.ctorParameters=function(){return[{type:n.AngularFireAuth},{type:void 0,decorators:[{type:e.Inject,args:[e.forwardRef((function(){return B}))]}]},{type:l.MatSnackBar},{type:G},{type:l.MatSnackBarConfig,decorators:[{type:e.Inject,args:[l.MAT_SNACK_BAR_DEFAULT_OPTIONS]}]}]},r.ɵprov=e.ɵɵdefineInjectable({factory:function(){return new r(e.ɵɵinject(n.AngularFireAuth),e.ɵɵinject(B),e.ɵɵinject(l.MatSnackBar),e.ɵɵinject(G),e.ɵɵinject(l.MAT_SNACK_BAR_DEFAULT_OPTIONS))},token:r,providedIn:"root"}),r=F([e.Injectable({providedIn:"root"}),R(1,e.Inject(e.forwardRef((function(){return B})))),R(4,e.Inject(l.MAT_SNACK_BAR_DEFAULT_OPTIONS))],r)}(),Z={verifyEmailTitleText:"Confirm your e-mail address!",verifyEmailConfirmationText:'A confirmation e-mail has been sent. Check your inbox and click on the link "Confirm my e-mail" to confirm your e-mail address.',verifyEmailGoBackText:"Go back",sendNewVerificationEmailText:"Send new confirmation e-mail",signOutText:"Sign out",messageOnEmailConfirmationSuccess:"A new confirmation e-mail has been sent. Please check your inbox."},J=function(){function t(t,r,n){this.authProcess=t,this.router=r,this.changeDetectorRef=n,this.signOut=new e.EventEmitter}return t.prototype.ngOnChanges=function(t){t.verifyEmailTemplate&&null==t.verifyEmailTemplate.currentValue&&(this.verifyEmailTemplate=this.defaultTemplate,console.log("ngOnChanges - defaultTemplate:",this.verifyEmailTemplate)),this.verifyEmailContext=this.createTemplateContext()},t.prototype.ngOnInit=function(){this.verifyEmailTemplate||(console.log("ngOnInit - defaultTemplate"),this.verifyEmailTemplate=this.defaultTemplate),this.verifyEmailContext=this.createTemplateContext(),console.log("verifyEmailTemplate:",this.verifyEmailTemplate),console.log("verifyEmailContext:",this.verifyEmailContext)},t.prototype.continue=function(){return M(this,void 0,void 0,(function(){var t;return O(this,(function(e){switch(e.label){case 0:return e.trys.push([0,3,,4]),[4,this.authProcess.reloadUserInfo()];case 1:return e.sent(),[4,this.router.navigate([this.goBackURL])];case 2:return e.sent(),[3,4];case 3:return t=e.sent(),this.authProcess.notifyError(t),[3,4];case 4:return[2]}}))}))},t.prototype.sendNewVerificationEmail=function(){return M(this,void 0,void 0,(function(){var t;return O(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,3,4]),this.isLoading=!0,this.changeDetectorRef.markForCheck(),[4,this.authProcess.sendNewVerificationEmail()];case 1:return e.sent(),this.authProcess.showToast(this.verifyEmailContext.messageOnEmailConfirmationSuccess),[3,4];case 2:return t=e.sent(),this.authProcess.notifyError(t),[3,4];case 3:return this.isLoading=!1,this.changeDetectorRef.markForCheck(),[7];case 4:return[2]}}))}))},t.prototype.createTemplateContext=function(){return{email:this.email,goBackURL:this.goBackURL,verifyEmailTitleText:this.verifyEmailTitleText||Z.verifyEmailTitleText,verifyEmailConfirmationText:this.verifyEmailConfirmationText||Z.verifyEmailConfirmationText,verifyEmailGoBackText:this.verifyEmailGoBackText||Z.verifyEmailGoBackText,sendNewVerificationEmailText:this.sendNewVerificationEmailText||Z.sendNewVerificationEmailText,signOutText:this.signOutText||Z.signOutText,messageOnEmailConfirmationSuccess:this.messageOnEmailConfirmationSuccess||Z.messageOnEmailConfirmationSuccess}},t.ctorParameters=function(){return[{type:X},{type:r.Router},{type:e.ChangeDetectorRef}]},F([e.Input()],t.prototype,"email",void 0),F([e.Input()],t.prototype,"goBackURL",void 0),F([e.Input()],t.prototype,"verifyEmailTitleText",void 0),F([e.Input()],t.prototype,"verifyEmailConfirmationText",void 0),F([e.Input()],t.prototype,"verifyEmailGoBackText",void 0),F([e.Input()],t.prototype,"sendNewVerificationEmailText",void 0),F([e.Input()],t.prototype,"signOutText",void 0),F([e.Input()],t.prototype,"messageOnEmailConfirmationSuccess",void 0),F([e.Input()],t.prototype,"template",void 0),F([e.Output()],t.prototype,"signOut",void 0),F([e.ViewChild("defaultVerifyEmail",{static:!0})],t.prototype,"defaultTemplate",void 0),t=F([e.Component({selector:"ngx-auth-firebaseui-email-confirmation",template:'<ng-container *ngTemplateOutlet="verifyEmailTemplate; context: verifyEmailContext"></ng-container>\n<ng-template #defaultVerifyEmail let-email="email" let-goBackURL="goBackURL"\n             let-sendNewVerificationEmailText="sendNewVerificationEmailText"\n             let-signOutText="signOutText"\n             let-verifyEmailConfirmationText="verifyEmailConfirmationText" let-verifyEmailGoBackText="verifyEmailGoBackText"\n             let-verifyEmailTitleText="verifyEmailTitleText">\n  <mat-card class="verify-email">\n    <mat-card-content fxLayout="column" fxLayoutAlign="center center">\n      <mat-icon>email</mat-icon>\n      <p class="title" fxLayout="column" fxLayoutAlign="center center">\n        <span class="mat-subheading-2">{{ verifyEmailTitleText }}</span>\n        <span class="mat-body-2">{{ email }}</span>\n      </p>\n      <p class="subtitle">{{ verifyEmailConfirmationText }}</p>\n      <mat-progress-bar *ngIf="isLoading" mode="indeterminate"></mat-progress-bar>\n    </mat-card-content>\n    <mat-card-actions fxLayout="column" fxLayoutAlign="center center">\n      <button (click)="continue()" *ngIf="goBackURL" class="go-back-button action-button" mat-stroked-button>\n        {{ verifyEmailGoBackText }}\n      </button>\n      <button (click)="sendNewVerificationEmail()" class="send-new-mail-button action-button"\n              mat-stroked-button>{{ sendNewVerificationEmailText }}</button>\n      <button (click)="this.signOut.emit()" class="sign-out-button action-button" color="warn"\n              mat-stroked-button>{{ signOutText }}</button>\n    </mat-card-actions>\n  </mat-card>\n</ng-template>\n',changeDetection:e.ChangeDetectionStrategy.OnPush,styles:[".material-icons{font-size:4rem}.verify-email{width:360px}.verify-email .mat-icon{height:4rem;width:4rem;color:#444}.verify-email .title{margin-top:16px}.verify-email .title .mat-subheading-2{margin-bottom:0}.verify-email .subtitle{margin:16px auto;text-align:justify}.verify-email p{display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}.verify-email mat-card-actions{text-align:center;margin-top:1rem}.verify-email mat-card-actions .action-button{width:100%}.verify-email mat-card-actions .action-button+.action-button{margin-top:1rem}"]})],t)}(),Q=function(){function t(t,e){this.dialogRef=t,this.data=e,this._disableConfirmActionButton=!1}return Object.defineProperty(t.prototype,"disableConfirmActionButton",{get:function(){return this.data.tosUrl&&this.data.privacyPolicyUrl?this._disableConfirmActionButton=!(this.checkTOS&&this.checkPrivacyPolicy):this.data.tosUrl&&!this.data.privacyPolicyUrl?this._disableConfirmActionButton=!this.checkTOS:!this.data.tosUrl&&this.data.privacyPolicyUrl&&(this._disableConfirmActionButton=!this.checkPrivacyPolicy),this._disableConfirmActionButton},enumerable:!0,configurable:!0}),t.prototype.closeDialog=function(){var t={checked:!this.disableConfirmActionButton,authProvider:this.data.authProvider};this.dialogRef.close(t)},t.ctorParameters=function(){return[{type:c.MatDialogRef},{type:void 0,decorators:[{type:e.Inject,args:[c.MAT_DIALOG_DATA]}]}]},t=F([e.Component({selector:"ngx-auth-firebaseui-legality-dialog",template:'<h1 matDialogTitle>Legal requirements</h1>\n\n<mat-dialog-content>\n  <div fxLayout="column" fxLayoutAlign="start">\n    <mat-checkbox *ngIf="this.data.tosUrl" [(ngModel)]="checkTOS">\n      I agree to the\n      <span>&nbsp;</span>\n      <a [href]="this.data.tosUrl"\n         target="_blank">\n        Terms of Service and Conditions\n      </a>\n    </mat-checkbox>\n\n    <mat-checkbox *ngIf="this.data.privacyPolicyUrl"\n                  [(ngModel)]="checkPrivacyPolicy">\n      I have read and agree to the\n      <span>&nbsp;</span>\n      <a [href]="this.data.privacyPolicyUrl"\n         target="_blank">\n        Privacy\n      </a>\n    </mat-checkbox>\n  </div>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n  <button color="warn"\n          id="decline-action"\n          mat-raised-button\n          matDialogClose>Decline\n  </button>\n  <button (click)="closeDialog()"\n          [disabled]="disableConfirmActionButton"\n          color="primary"\n          id="confirm-action"\n          mat-raised-button>Confirm\n  </button>\n</mat-dialog-actions>\n\n',styles:["::ng-deep .mat-checkbox-label{display:flex;flex-wrap:wrap}mat-dialog-content div{margin-top:1.5rem}mat-dialog-actions{margin-top:1rem}"]}),R(1,e.Inject(c.MAT_DIALOG_DATA))],t)}(),tt=h.animation([h.style({opacity:"{{opacity}}",transform:"scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})"}),h.animate("{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)",h.style("*"))],{params:{duration:"200ms",delay:"0ms",opacity:"0",scale:"1",x:"0",y:"0",z:"0"}}),et=[h.trigger("animate",[h.transition("void => *",[h.useAnimation(tt)])]),h.trigger("animateStagger",[h.state("50",h.style("*")),h.state("100",h.style("*")),h.state("200",h.style("*")),h.transition("void => 50",h.query("@*",[h.stagger("50ms",[h.animateChild()])],{optional:!0})),h.transition("void => 100",h.query("@*",[h.stagger("100ms",[h.animateChild()])],{optional:!0})),h.transition("void => 200",h.query("@*",[h.stagger("200ms",[h.animateChild()])],{optional:!0}))])],rt=new RegExp(['^(([^<>()[\\]\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\.,;:\\s@"]+)*)','|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.',"[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+","[a-zA-Z]{2,}))$"].join("")),nt=new RegExp(["^[+]{0,1}[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\.]{0,1}[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]{4,12}$"].join("")),ot=function(){function o(r,n,o,a,i,s,u){this.platformId=r,this.config=n,this.auth=o,this.authProcess=a,this.dialog=i,this.activatedRoute=s,this.changeDetectorRef=u,this.providers=t.AuthProvider.ALL,this.registrationEnabled=!0,this.resetPasswordEnabled=!0,this.guestEnabled=!0,this.selectedTabChange=new e.EventEmitter,this.enableLengthRule=!0,this.enableLowerCaseLetterRule=!0,this.enableUpperCaseLetterRule=!0,this.enableDigitRule=!0,this.enableSpecialCharRule=!0,this.onStrengthChanged=new e.EventEmitter,this.signOutText="Sign out",this.resetPasswordTabText="Reset e-mail address to password",this.resetPasswordInputText="Reset e-mail address to password",this.resetPasswordErrorRequiredText="E-mail is required to reset the password!",this.resetPasswordErrorPatternText="Please enter a valid e-mail address",this.resetPasswordActionButtonText="Reset",this.resetPasswordInstructionsText="Reset requested. Check your e-mail instructions.",this.signInTabText="Sign in",this.signInCardTitleText="Signing in",this.loginButtonText="Log In",this.forgotPasswordButtonText="Forgot Password ?",this.nameText="Name",this.nameErrorRequiredText="Name is required",this.nameErrorMinLengthText="The name is too short!",this.nameErrorMaxLengthText="The name is too long!",this.emailText="E-mail",this.emailErrorRequiredText="E-mail is required",this.emailErrorPatternText="Please enter a valid e-mail address",this.passwordText="Password",this.passwordErrorRequiredText="Password is required",this.passwordErrorMinLengthText="The password is too short!",this.passwordErrorMaxLengthText="The password is too long!",this.registerTabText="Register",this.registerCardTitleText="Registration",this.registerButtonText="Register",this.guestButtonText="continue as guest",this.emailConfirmationTitle="Confirm your e-mail address!",this.emailConfirmationText='A confirmation e-mail has been sent to you. Check your inbox and click on the link "Confirm my e-mail" to confirm your e-mail address.',this.authProvider=t.AuthProvider,this.authenticationError=!1,this.passReset=!1,this.authProviders=t.AuthProvider,this.onSuccess=a.onSuccessEmitter,this.onError=a.onErrorEmitter}return Object.defineProperty(o.prototype,"color",{get:function(){return this.authenticationError?"warn":"primary"},enumerable:!0,configurable:!0}),o.prototype.ngOnInit=function(){var t=this;p.isPlatformBrowser(this.platformId)&&(this.onErrorSubscription=this.onError.subscribe((function(){return t.authenticationError=!0}))),this.min=null!=this.min?Math.max(this.min,this.config.passwordMinLength):this.config.passwordMinLength,this.max=null!=this.max?Math.min(this.max,this.config.passwordMaxLength):this.config.passwordMaxLength,this.goBackURL=this.chooseBackUrl(),this.updateAuthSnackbarMessages(),this._initSignInFormGroupBuilder(),this._initSignUpFormGroupBuilder(),this._initResetPasswordFormGroupBuilder()},o.prototype.ngAfterViewInit=function(){var t=this;this.passwordStrength&&this.passwordStrength.onStrengthChanged.subscribe((function(e){t.onStrengthChanged.emit(e)}))},o.prototype.ngOnChanges=function(t){(t.messageOnAuthSuccess||t.messageOnAuthError)&&this.updateAuthSnackbarMessages(),t.min&&(this.min=null!=this.min?Math.max(this.min,this.config.passwordMinLength):this.config.passwordMinLength),t.max&&(this.max=null!=this.max?Math.min(this.max,this.config.passwordMaxLength):this.config.passwordMaxLength),t.goBackURL&&(this.goBackURL=this.chooseBackUrl())},o.prototype.ngOnDestroy=function(){this.onErrorSubscription&&this.onErrorSubscription.unsubscribe()},o.prototype.onTabChange=function(t){this.selectedTabChange.emit(t),this.tabIndex=t.index},o.prototype.signOut=function(){return M(this,void 0,void 0,(function(){return O(this,(function(t){switch(t.label){case 0:return t.trys.push([0,,2,3]),this.isLoading=!0,this.changeDetectorRef.markForCheck(),[4,this.authProcess.signOut()];case 1:return t.sent(),[3,3];case 2:return this.isLoading=!1,this.tabIndex=0,this.changeDetectorRef.markForCheck(),[7];case 3:return[2]}}))}))},o.prototype.signIn=function(){return M(this,void 0,void 0,(function(){return O(this,(function(t){switch(t.label){case 0:if(!this.signInFormGroup.valid)return[2];t.label=1;case 1:return t.trys.push([1,,3,4]),this.isLoading=!0,this.changeDetectorRef.markForCheck(),[4,this.authProcess.signInWith(this.authProviders.EmailAndPassword,{email:this.signInFormGroup.value.email,password:this.signInFormGroup.value.password})];case 2:return t.sent(),[3,4];case 3:return this.isLoading=!1,this.changeDetectorRef.markForCheck(),[7];case 4:return[2]}}))}))},o.prototype.updateAuthSnackbarMessages=function(){this.authProcess.messageOnAuthSuccess=this.messageOnAuthSuccess,this.authProcess.messageOnAuthError=this.messageOnAuthError},o.prototype.createForgotPasswordTab=function(){this.passwordResetWished=!0,this.tabIndex=2,this.changeDetectorRef.markForCheck()},o.prototype.processLegalSignUP=function(t){var e=this;if(this.tosUrl||this.privacyPolicyUrl){var r={tosUrl:this.tosUrl,privacyPolicyUrl:this.privacyPolicyUrl,authProvider:t};this.dialogRef=this.dialog.open(Q,{data:r}),this.dialogRef.afterClosed().subscribe((function(t){t&&t.checked&&e._afterSignUpMiddleware(t.authProvider).then((function(){return e.signUpFormGroup.reset()})),e.dialogRef=null}))}else this._afterSignUpMiddleware(t).then((function(){return e.signUpFormGroup.reset()}))},o.prototype.signUp=function(){return M(this,void 0,void 0,(function(){return O(this,(function(t){switch(t.label){case 0:return t.trys.push([0,,2,3]),this.isLoading=!0,this.changeDetectorRef.markForCheck(),[4,this.authProcess.signUp(this.signUpFormGroup.value.name,{email:this.signUpFormGroup.value.email,password:this.signUpFormGroup.value.password})];case 1:return[2,t.sent()];case 2:return this.isLoading=!1,this.changeDetectorRef.markForCheck(),[7];case 3:return[2]}}))}))},o.prototype.signUpAnonymously=function(){return M(this,void 0,void 0,(function(){return O(this,(function(t){switch(t.label){case 0:return t.trys.push([0,,2,3]),this.isLoading=!0,this.changeDetectorRef.markForCheck(),[4,this.authProcess.signInWith(this.authProvider.ANONYMOUS)];case 1:return t.sent(),[3,3];case 2:return this.isLoading=!1,this.changeDetectorRef.markForCheck(),[7];case 3:return[2]}}))}))},o.prototype.resetPassword=function(){var t=this;this.authProcess.resetPassword(this.resetPasswordEmailFormControl.value).then((function(){t.passReset=!0,t.changeDetectorRef.markForCheck()}))},o.prototype.chooseBackUrl=function(){return this.activatedRoute.snapshot.queryParams.redirectUrl||this.goBackURL||"/"},o.prototype._initSignInFormGroupBuilder=function(){this.signInFormGroup=new m.FormGroup({}),this.signInFormGroup.registerControl("email",this.signInEmailFormControl=new m.FormControl("",[m.Validators.required,m.Validators.pattern(rt)])),this.signInFormGroup.registerControl("password",this.sigInPasswordFormControl=new m.FormControl("",[m.Validators.required,m.Validators.minLength(this.min),m.Validators.maxLength(this.max)]))},o.prototype._initSignUpFormGroupBuilder=function(){this.signUpFormGroup=new m.FormGroup({name:this.sigUpNameFormControl=new m.FormControl("",[m.Validators.required,m.Validators.minLength(this.config.nameMinLength),m.Validators.maxLength(this.config.nameMaxLength)]),email:this.sigUpEmailFormControl=new m.FormControl("",[m.Validators.required,m.Validators.pattern(rt)]),password:this.sigUpPasswordFormControl=new m.FormControl("",[m.Validators.required,m.Validators.minLength(this.min),m.Validators.maxLength(this.max)])})},o.prototype._initResetPasswordFormGroupBuilder=function(){this.resetPasswordFormGroup=new m.FormGroup({email:this.resetPasswordEmailFormControl=new m.FormControl("",[m.Validators.required,m.Validators.pattern(rt)])})},o.prototype._afterSignUpMiddleware=function(t){return t===this.authProvider.ANONYMOUS?this.signUpAnonymously():this.signUp()},o.ctorParameters=function(){return[{type:Object,decorators:[{type:e.Inject,args:[e.PLATFORM_ID]}]},{type:void 0,decorators:[{type:e.Inject,args:[e.forwardRef((function(){return B}))]}]},{type:n.AngularFireAuth},{type:X},{type:c.MatDialog},{type:r.ActivatedRoute},{type:e.ChangeDetectorRef}]},F([e.ViewChild(d.MatTabGroup,{static:!1})],o.prototype,"matTabGroup",void 0),F([e.ViewChild(g.MatPasswordStrengthComponent,{static:!1})],o.prototype,"passwordStrength",void 0),F([e.Input()],o.prototype,"providers",void 0),F([e.Input()],o.prototype,"providersTheme",void 0),F([e.Input()],o.prototype,"appearance",void 0),F([e.Input()],o.prototype,"tabIndex",void 0),F([e.Input()],o.prototype,"registrationEnabled",void 0),F([e.Input()],o.prototype,"resetPasswordEnabled",void 0),F([e.Input()],o.prototype,"guestEnabled",void 0),F([e.Input()],o.prototype,"tosUrl",void 0),F([e.Input()],o.prototype,"privacyPolicyUrl",void 0),F([e.Input()],o.prototype,"goBackURL",void 0),F([e.Input()],o.prototype,"messageOnAuthSuccess",void 0),F([e.Input()],o.prototype,"messageOnAuthError",void 0),F([e.Input()],o.prototype,"messageOnEmailConfirmationSuccess",void 0),F([e.Output()],o.prototype,"onSuccess",void 0),F([e.Output()],o.prototype,"onError",void 0),F([e.Output()],o.prototype,"selectedTabChange",void 0),F([e.Input()],o.prototype,"enableLengthRule",void 0),F([e.Input()],o.prototype,"enableLowerCaseLetterRule",void 0),F([e.Input()],o.prototype,"enableUpperCaseLetterRule",void 0),F([e.Input()],o.prototype,"enableDigitRule",void 0),F([e.Input()],o.prototype,"enableSpecialCharRule",void 0),F([e.Input()],o.prototype,"min",void 0),F([e.Input()],o.prototype,"max",void 0),F([e.Input()],o.prototype,"customValidator",void 0),F([e.Output()],o.prototype,"onStrengthChanged",void 0),F([e.Input()],o.prototype,"verifyEmailTemplate",void 0),F([e.Input()],o.prototype,"verifyEmailTitleText",void 0),F([e.Input()],o.prototype,"verifyEmailConfirmationText",void 0),F([e.Input()],o.prototype,"verifyEmailGoBackText",void 0),F([e.Input()],o.prototype,"sendNewVerificationEmailText",void 0),F([e.Input()],o.prototype,"signOutText",void 0),F([e.Input()],o.prototype,"resetPasswordTabText",void 0),F([e.Input()],o.prototype,"resetPasswordInputText",void 0),F([e.Input()],o.prototype,"resetPasswordErrorRequiredText",void 0),F([e.Input()],o.prototype,"resetPasswordErrorPatternText",void 0),F([e.Input()],o.prototype,"resetPasswordActionButtonText",void 0),F([e.Input()],o.prototype,"resetPasswordInstructionsText",void 0),F([e.Input()],o.prototype,"signInTabText",void 0),F([e.Input()],o.prototype,"signInCardTitleText",void 0),F([e.Input()],o.prototype,"loginButtonText",void 0),F([e.Input()],o.prototype,"forgotPasswordButtonText",void 0),F([e.Input()],o.prototype,"nameText",void 0),F([e.Input()],o.prototype,"nameErrorRequiredText",void 0),F([e.Input()],o.prototype,"nameErrorMinLengthText",void 0),F([e.Input()],o.prototype,"nameErrorMaxLengthText",void 0),F([e.Input()],o.prototype,"emailText",void 0),F([e.Input()],o.prototype,"emailErrorRequiredText",void 0),F([e.Input()],o.prototype,"emailErrorPatternText",void 0),F([e.Input()],o.prototype,"passwordText",void 0),F([e.Input()],o.prototype,"passwordErrorRequiredText",void 0),F([e.Input()],o.prototype,"passwordErrorMinLengthText",void 0),F([e.Input()],o.prototype,"passwordErrorMaxLengthText",void 0),F([e.Input()],o.prototype,"registerTabText",void 0),F([e.Input()],o.prototype,"registerCardTitleText",void 0),F([e.Input()],o.prototype,"registerButtonText",void 0),F([e.Input()],o.prototype,"guestButtonText",void 0),F([e.Input()],o.prototype,"emailConfirmationTitle",void 0),F([e.Input()],o.prototype,"emailConfirmationText",void 0),o=F([e.Component({selector:"ngx-auth-firebaseui",template:'<ng-container *ngIf="authProcess.user$ | async as user; else showForm">\n\n  \x3c!-- This component will be shown when:\n    - we just sent a verification mail (notably after sign up)\n    - we arrived from the guard after trying to access a protected route even though we are connected\n  --\x3e\n  <div\n    *ngIf="(config.guardProtectedRoutesUntilEmailIsVerified && !user.emailVerified) || (authProcess.emailConfirmationSent && !user.emailVerified); else signedInUser"\n    fxLayout="row" fxLayoutAlign="center center">\n    <ngx-auth-firebaseui-email-confirmation\n      (signOut)="signOut()"\n      [email]="user.email"\n      [goBackURL]="goBackURL"\n      [messageOnEmailConfirmationSuccess]="messageOnEmailConfirmationSuccess"\n      [sendNewVerificationEmailText]="sendNewVerificationEmailText"\n      [signOutText]="signOutText"\n      [template]="verifyEmailTemplate"\n      [verifyEmailConfirmationText]="verifyEmailConfirmationText"\n      [verifyEmailGoBackText]="verifyEmailGoBackText"\n      [verifyEmailTitleText]="verifyEmailTitleText">\n    </ngx-auth-firebaseui-email-confirmation>\n  </div>\n\n  <ng-template #signedInUser>\n    <div class="signed-in-container" fxLayout="column" fxLayoutAlign="center center">\n      <img *ngIf="user?.photoURL; else noPhoto" [src]="user?.photoURL" class="account-circle">\n      <ng-template #noPhoto>\n        <mat-icon class="account-circle">account_circle</mat-icon>\n      </ng-template>\n      <div class="user-display-name mat-title">{{ user?.displayName }}</div>\n      <div class="user-email mat-body-2">{{ user?.email }}</div>\n      <div class="actions">\n        <mat-progress-bar *ngIf="isLoading" mode="indeterminate"></mat-progress-bar>\n        <a *ngIf="verifyEmailGoBackText" [routerLink]="goBackURL" class="go-back-button action-button" color="primary"\n           mat-stroked-button>{{ verifyEmailGoBackText }}</a>\n        <button (click)="signOut()" class="sign-out-button action-button" color="warn"\n                mat-stroked-button>{{ signOutText }}</button>\n      </div>\n    </div>\n  </ng-template>\n\n</ng-container>\n\n<ng-template #showForm>\n  <mat-tab-group (selectedTabChange)="onTabChange($event)" [color]="color" [selectedIndex]="tabIndex">\n    \x3c!--Sign in tab--\x3e\n    <mat-tab [label]="signInTabText">\n      <mat-card>\n        <mat-card-title>{{signInCardTitleText}}</mat-card-title>\n        <mat-card-content>\n          <form (ngSubmit)="signIn()"\n                [@animateStagger]="{ value: \'50\' }"\n                [formGroup]="signInFormGroup">\n            <div fxLayout="column" fxLayoutAlign="center">\n              <mat-form-field [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                              [appearance]="appearance">\n                <mat-label>{{emailText}}</mat-label>\n                <input formControlName="email"\n                       matInput\n                       required>\n                <mat-icon [color]="color" matSuffix>email</mat-icon>\n                <mat-error *ngIf="signInEmailFormControl.hasError(\'required\')">\n                  {{emailErrorRequiredText}}\n                </mat-error>\n                <mat-error *ngIf="signInEmailFormControl.hasError(\'pattern\')">\n                  {{emailErrorPatternText}}\n                </mat-error>\n              </mat-form-field>\n\n              <mat-form-field [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n                              [appearance]="appearance">\n                <mat-label>{{passwordText}}</mat-label>\n                <input [maxlength]="max" [minlength]="min" [type]="togglePass.type" formControlName="password" matInput\n                       required/>\n                <mat-pass-toggle-visibility #togglePass matSuffix></mat-pass-toggle-visibility>\n                <mat-icon [color]="color" matSuffix>lock</mat-icon>\n                <mat-hint align="end" aria-live="polite"> {{ signInFormGroup.value.password.length }}\n                  / {{ max }} </mat-hint>\n                <mat-error *ngIf="sigInPasswordFormControl.hasError(\'required\')">\n                  {{passwordErrorRequiredText}}\n                </mat-error>\n                <mat-error *ngIf="sigInPasswordFormControl.hasError(\'minlength\')">\n                  {{ passwordErrorMinLengthText }}\n                </mat-error>\n                <mat-error *ngIf="sigInPasswordFormControl.hasError(\'maxlength\')">\n                  {{ passwordErrorMaxLengthText }}\n                </mat-error>\n              </mat-form-field>\n\n              <button [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n                      [color]="color"\n                      [disabled]="signInFormGroup.invalid"\n                      class="space-top"\n                      mat-raised-button\n                      style="margin-top: 20px"\n                      type="submit">\n                {{loginButtonText}}\n              </button>\n\n            </div>\n          </form>\n\n          <div fxLayoutAlign="center">\n            <button (click)="createForgotPasswordTab()"\n                    *ngIf="resetPasswordEnabled"\n                    [@animate]="{ value: \'*\', params: { x: \'-50px\' } }"\n                    [color]="color"\n                    class="space-top"\n                    mat-button>\n              {{forgotPasswordButtonText}}\n            </button>\n          </div>\n\n        </mat-card-content>\n        <mat-card-footer *ngIf="isLoading">\n          <mat-progress-bar [@animate]="{ value: \'*\', params: { z: \'50px\', delay: \'50ms\', scale: \'0.2\' } }"\n                            mode="indeterminate"></mat-progress-bar>\n        </mat-card-footer>\n      </mat-card>\n    </mat-tab>\n\n    \x3c!--tab register--\x3e\n    <mat-tab *ngIf="registrationEnabled" [label]="registerTabText">\n      <mat-card>\n        <mat-card-title>{{registerCardTitleText}}</mat-card-title>\n        <mat-card-content fxLayout="column" fxLayoutAlign="center">\n          <form (ngSubmit)="signUpFormGroup.valid &&\n            processLegalSignUP(authProvider.EmailAndPassword)"\n                [@animateStagger]="{ value: \'50\' }" [formGroup]="signUpFormGroup">\n            <div fxLayout="column" fxLayoutAlign="center">\n              \x3c!--name--\x3e\n              <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n                              [appearance]="appearance">\n                \x3c!--labels will work only with @angular/material@6.2.0 --\x3e\n                <mat-label>{{nameText}}</mat-label>\n                <input\n                  [formControl]="sigUpNameFormControl"\n                  [maxlength]="config.nameMaxLength"\n                  [minlength]="config.nameMinLength"\n                  matInput\n                  required\n                />\n                <mat-icon [color]="color" matSuffix>person</mat-icon>\n                <mat-hint align="end" aria-live="polite"> {{ signUpFormGroup.value.name?.length }}\n                  / {{ config.nameMaxLength }} </mat-hint>\n                <mat-error *ngIf="sigUpNameFormControl.hasError(\'required\')">\n                  {{nameErrorRequiredText}}\n                </mat-error>\n                <mat-error *ngIf="sigUpNameFormControl.hasError(\'minlength\')">\n                  {{nameErrorMinLengthText}}\n                </mat-error>\n                <mat-error *ngIf="sigUpNameFormControl.hasError(\'maxlength\')">\n                  {{nameErrorMaxLengthText}}\n                </mat-error>\n              </mat-form-field>\n\n              \x3c!--email--\x3e\n              <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n                              [appearance]="appearance">\n                <mat-label>{{emailText}}</mat-label>\n                <input [formControl]="sigUpEmailFormControl"\n                       matInput\n                       required\n                       type="email">\n                <mat-icon [color]="color" matSuffix>email</mat-icon>\n                <mat-error *ngIf="sigUpEmailFormControl.hasError(\'required\')">\n                  {{emailErrorRequiredText}}\n                </mat-error>\n                <mat-error *ngIf="sigUpEmailFormControl.hasError(\'pattern\')">\n                  {{emailErrorPatternText}}\n                </mat-error>\n              </mat-form-field>\n\n              \x3c!--password--\x3e\n              <div fxLayout="column">\n                <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n                                [appearance]="appearance">\n                  <mat-label>{{passwordText}}</mat-label>\n                  <input\n                    [formControl]="sigUpPasswordFormControl"\n                    [maxlength]="max"\n                    [minlength]="min"\n                    [type]="toggle.type"\n                    matInput\n                    name="password"\n                    required\n                  />\n                  <mat-pass-toggle-visibility #toggle matSuffix></mat-pass-toggle-visibility>\n\n                  <mat-icon [color]="color" matSuffix>lock</mat-icon>\n\n                  <mat-hint align="end" aria-live="polite">\n                    {{signUpFormGroup.value.password?.length}} / {{ max }}\n                  </mat-hint>\n\n                  <mat-error *ngIf="sigUpPasswordFormControl.hasError(\'required\')" class="cut-text">\n                    {{passwordErrorRequiredText}}\n                  </mat-error>\n\n                  <mat-error *ngIf="sigUpPasswordFormControl.hasError(\'minlength\')" class="cut-text">\n                    {{ passwordErrorMinLengthText }}\n                  </mat-error>\n                  <mat-error *ngIf="sigUpPasswordFormControl.hasError(\'maxlength\')" class="cut-text">\n                    {{ passwordErrorMaxLengthText }}\n                  </mat-error>\n\n                </mat-form-field>\n\n                <mat-password-strength #passwordStrength\n                                       [customValidator]="customValidator"\n                                       [enableDigitRule]="enableDigitRule"\n                                       [enableLengthRule]="enableLengthRule"\n                                       [enableLowerCaseLetterRule]="enableLowerCaseLetterRule"\n                                       [enableSpecialCharRule]="enableSpecialCharRule"\n                                       [enableUpperCaseLetterRule]="enableUpperCaseLetterRule"\n                                       [externalError]="sigUpPasswordFormControl.dirty"\n                                       [max]="max"\n                                       [min]="min"\n                                       [password]="signUpFormGroup.value.password">\n                </mat-password-strength>\n\n              </div>\n\n              <button [@animate]="{ value: \'*\', params: { x: \'100px\' } }"\n                      [color]="color"\n                      [disabled]="signUpFormGroup.invalid"\n                      mat-raised-button\n                      style="margin-top: 20px"\n                      type="submit">\n                {{registerButtonText}}\n              </button>\n\n            </div>\n          </form>\n\n          <button (click)="processLegalSignUP(authProvider.ANONYMOUS)"\n                  *ngIf="guestEnabled"\n                  [@animate]="{ value: \'*\', params: { x: \'-100px\' } }"\n                  [color]="color"\n                  mat-button\n                  style="margin-top: 20px">\n            <mat-icon>fingerprint</mat-icon>\n            {{guestButtonText}}\n          </button>\n\n        </mat-card-content>\n\n        <mat-card-footer *ngIf="isLoading">\n          <mat-progress-bar [@animate]="{ value: \'*\', params: { z: \'50px\', delay: \'50ms\', scale: \'0.2\' } }"\n                            mode="indeterminate"></mat-progress-bar>\n        </mat-card-footer>\n\n      </mat-card>\n    </mat-tab>\n\n    \x3c!--Reset password tab--\x3e\n    <mat-tab *ngIf="passwordResetWished" class="reset-password-tab">\n      <ng-template mat-tab-label>\n        <button (click)="passwordResetWished = false" class="reset-password-tab__close-button" mat-icon-button>\n          {{ resetPasswordTabText }}\n          <mat-icon>close</mat-icon>\n        </button>\n      </ng-template>\n      <form (ngSubmit)="resetPasswordFormGroup.valid && resetPassword()"\n            [@animateStagger]="{ value: \'50\' }"\n            [formGroup]="resetPasswordFormGroup">\n        <mat-card class="reset-password-card">\n          <mat-card-content>\n            <mat-form-field [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}" [appearance]="appearance"\n                            class="full-width">\n              <mat-label> {{ resetPasswordInputText }} </mat-label>\n              <input [title]="resetPasswordInputText"\n                     formControlName="email"\n                     matInput\n                     required>\n              <mat-icon [color]="color" matSuffix>email</mat-icon>\n              <mat-error *ngIf="resetPasswordEmailFormControl.hasError(\'required\')">\n                {{resetPasswordErrorRequiredText}}\n              </mat-error>\n              <mat-error *ngIf="resetPasswordEmailFormControl.hasError(\'pattern\')">\n                {{resetPasswordErrorPatternText}}\n              </mat-error>\n            </mat-form-field>\n            <p *ngIf="passReset">{{resetPasswordInstructionsText}}</p>\n          </mat-card-content>\n          <mat-card-actions fxLayoutAlign="center">\n            <mat-progress-bar *ngIf="isLoading" mode="indeterminate"></mat-progress-bar>\n            <button [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n                    [color]="color"\n                    mat-raised-button\n                    type="submit">\n              {{resetPasswordActionButtonText}}\n            </button>\n          </mat-card-actions>\n        </mat-card>\n      </form>\n    </mat-tab>\n\n  </mat-tab-group>\n  <mat-divider></mat-divider>\n  <ngx-auth-firebaseui-providers *ngIf="tabIndex !== 2"\n                                 [providers]="providers"\n                                 [theme]="providersTheme"\n                                 [tosUrl]="tosUrl"\n                                 [privacyPolicyUrl]="privacyPolicyUrl">\n  </ngx-auth-firebaseui-providers>\n</ng-template>\n',animations:et,changeDetection:e.ChangeDetectionStrategy.OnPush,styles:[".mat-card{margin:2rem}.space-top{margin-top:.5rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.signed-in-container .account-circle{font-size:12rem;width:12rem;height:12rem}.signed-in-container img.account-circle{-o-object-fit:cover;object-fit:cover;border-radius:50%}.signed-in-container .sign-out-button{margin-top:2rem}.signed-in-container .user-display-name{margin-top:1rem}.signed-in-container .user-email{margin-top:-1rem}.signed-in-container .actions{margin-top:2rem}.signed-in-container .actions .action-button,.signed-in-container .actions mat-progress-bar{width:100%}.signed-in-container .actions .action-button{margin-top:1rem}.reset-password-tab mat-progress-bar{margin-bottom:1rem}.reset-password-tab__close-button{width:100%;display:flex;justify-content:space-between;align-items:center}.reset-password-tab__close-button mat-icon{font-size:18px;position:relative;top:-1px}"]}),R(0,e.Inject(e.PLATFORM_ID)),R(1,e.Inject(e.forwardRef((function(){return B}))))],o)}(),at=function(){function t(t,r){this.afa=t,this.dialog=r,this.layout="default",this.canLogout=!0,this.canViewAccount=!0,this.canDeleteAccount=!0,this.canEditAccount=!0,this.textProfile="Profile",this.textSignOut="Sign Out",this.onSignOut=new e.EventEmitter}return t.prototype.ngOnInit=function(){var t=this;this.user$=this.afa.user,this.user$.subscribe((function(e){t.user=e,t.displayNameInitials=e?t.getDisplayNameInitials(e.displayName):null}))},t.prototype.getDisplayNameInitials=function(t){if(!t)return null;var e=t.match(/\b\w/g)||[];return((e.shift()||"")+(e.pop()||"")).toUpperCase()},t.prototype.openProfile=function(){var t=this.dialog.open(lt).componentInstance;t.canDeleteAccount=this.canDeleteAccount,t.canEditAccount=this.canEditAccount},t.prototype.signOut=function(){return M(this,void 0,void 0,(function(){var t;return O(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,this.afa.signOut()];case 1:return e.sent(),this.onSignOut.emit(),[3,3];case 2:return t=e.sent(),console.error("An error happened while signing out!",t),[3,3];case 3:return[2]}}))}))},t.ctorParameters=function(){return[{type:n.AngularFireAuth},{type:c.MatDialog}]},F([e.Input()],t.prototype,"layout",void 0),F([e.Input()],t.prototype,"canLogout",void 0),F([e.Input()],t.prototype,"links",void 0),F([e.Input()],t.prototype,"canViewAccount",void 0),F([e.Input()],t.prototype,"canDeleteAccount",void 0),F([e.Input()],t.prototype,"canEditAccount",void 0),F([e.Input()],t.prototype,"textProfile",void 0),F([e.Input()],t.prototype,"textSignOut",void 0),F([e.Output()],t.prototype,"onSignOut",void 0),t=F([e.Component({selector:"ngx-auth-firebaseui-avatar",template:'<button *ngIf="user"\n        class="ngx-auth-firebaseui-avatar-button"\n        [matMenuTriggerFor]="posXMenu"\n        [matTooltip]="user?.displayName"\n        [style.background-image]="\'url(\' + user?.photoURL + \')\'"\n        aria-label="Open x-positioned menu"\n        mat-mini-fab\n        style="background-size: cover">\n  <span *ngIf="!user?.photoURL">{{displayNameInitials || \'\'}}</span>\n</button>\n\n<mat-menu #posXMenu="matMenu" class="before ngx-auth-firebaseui-avatar-menu" xPosition="before" >\n  <div fxLayout="row" fxLayout.xs="column" style="padding-left: 10px; padding-right: 10px" [ngStyle]="{ \'padding-top.px\': layout === \'default\' ? 0 : 10 }">\n    <button [style.background-image]="\'url(\' + user?.photoURL + \')\'"\n            mat-fab\n            style="background-size: cover"\n            *ngIf="layout === \'default\'">\n      <span *ngIf="!user?.photoURL">{{displayNameInitials || \'\'}}</span>\n    </button>\n    <div fxLayout="column" style="padding-left: 10px; padding-right: 10px">\n      <strong mat-card-title>{{user?.displayName}}</strong>\n      <em mat-card-subtitle style="font-style: italic">{{user?.email}}</em>\n    </div>\n  </div>\n\n  <div fxFlex="100" fxLayout="column" [ngStyle]="{ \'padding-bottom.px\': layout === \'default\' ? 0 : 10 } ">\n    <div *ngFor="let menuItem of links" class="links-menu">\n      <button (click)="menuItem?.callback()" mat-menu-item>\n        <mat-icon>{{menuItem?.icon}}</mat-icon>\n        {{menuItem?.text}}</button>\n    </div>\n    <button *ngIf="canViewAccount" (click)="openProfile()" color="primary" fxLayoutAlign="center" mat-raised-button>{{ textProfile }}\n    </button>\n    <button (click)="signOut()" *ngIf="canLogout" color="warn" fxLayoutAlign="center" mat-raised-button>{{ textSignOut }}\n    </button>\n  </div>\n</mat-menu>\n',styles:[".mat-raised-button{margin:.2rem 1rem}.links-menu{text-align:center}"]})],t)}(),it=function(){function r(r,n,o){this.platformId=r,this.authProcess=n,this.formBuilder=o,this.providers=t.AuthProvider.ALL,this.registrationEnabled=!0,this.resetPasswordEnabled=!0,this.titleText="LOGIN TO YOUR ACCOUNT",this.rememberMeText="Remember Me",this.loginButtonText="LOGIN",this.orLabelText="OR",this.forgotPasswordText="Forgot Password?",this.dontHaveAnAccountText="Don't have an account?",this.createAccountButtonText="Create an account",this.emailText="Email",this.emailErrorRequiredText="Email is required",this.emailErrorPatternText="Please enter a valid email address",this.passwordText="Password",this.passwordErrorRequiredText="Password is required",this.onCreateAccountRequested=new e.EventEmitter,this.onResetPasswordRequested=new e.EventEmitter,this.authProviders=t.AuthProvider,this.authenticationError=!1,this.onSuccess=n.onSuccessEmitter,this.onError=n.onErrorEmitter}return Object.defineProperty(r.prototype,"color",{get:function(){return this.authenticationError?"warn":"primary"},enumerable:!0,configurable:!0}),Object.defineProperty(r.prototype,"colorAccent",{get:function(){return this.authenticationError?"warn":"accent"},enumerable:!0,configurable:!0}),r.prototype.ngOnInit=function(){var t=this;p.isPlatformBrowser(this.platformId)&&(this.onErrorSubscription=this.onError.subscribe((function(){return t.authenticationError=!0}))),this.updateAuthSnackbarMessages(),this.loginForm=this.formBuilder.group({email:["",[m.Validators.required,m.Validators.email]],password:["",m.Validators.required]})},r.prototype.updateAuthSnackbarMessages=function(){this.authProcess.messageOnAuthSuccess=this.messageOnAuthSuccess,this.authProcess.messageOnAuthError=this.messageOnAuthError},r.prototype.login=function(){return M(this,void 0,void 0,(function(){return O(this,(function(t){switch(t.label){case 0:return[4,this.authProcess.signInWith(this.authProviders.EmailAndPassword,{email:this.loginForm.controls.email.value,password:this.loginForm.controls.password.value})];case 1:return[2,t.sent()]}}))}))},r.ctorParameters=function(){return[{type:Object,decorators:[{type:e.Inject,args:[e.PLATFORM_ID]}]},{type:X},{type:m.FormBuilder}]},F([e.Input()],r.prototype,"logoUrl",void 0),F([e.Input()],r.prototype,"providers",void 0),F([e.Input()],r.prototype,"appearance",void 0),F([e.Input()],r.prototype,"registrationEnabled",void 0),F([e.Input()],r.prototype,"resetPasswordEnabled",void 0),F([e.Input()],r.prototype,"messageOnAuthSuccess",void 0),F([e.Input()],r.prototype,"messageOnAuthError",void 0),F([e.Input()],r.prototype,"titleText",void 0),F([e.Input()],r.prototype,"rememberMeText",void 0),F([e.Input()],r.prototype,"loginButtonText",void 0),F([e.Input()],r.prototype,"orLabelText",void 0),F([e.Input()],r.prototype,"forgotPasswordText",void 0),F([e.Input()],r.prototype,"dontHaveAnAccountText",void 0),F([e.Input()],r.prototype,"createAccountButtonText",void 0),F([e.Input()],r.prototype,"emailText",void 0),F([e.Input()],r.prototype,"emailErrorRequiredText",void 0),F([e.Input()],r.prototype,"emailErrorPatternText",void 0),F([e.Input()],r.prototype,"passwordText",void 0),F([e.Input()],r.prototype,"passwordErrorRequiredText",void 0),F([e.Output()],r.prototype,"onSuccess",void 0),F([e.Output()],r.prototype,"onError",void 0),F([e.Output()],r.prototype,"onCreateAccountRequested",void 0),F([e.Output()],r.prototype,"onResetPasswordRequested",void 0),r=F([e.Component({selector:"ngx-auth-firebaseui-login",template:'<div fxLayout="column" id="login">\n\n  <div fxLayout="column" fxLayoutAlign="center center" id="login-form-wrapper">\n\n    <div [@animateStagger]="{ value: \'50\' }" id="login-form">\n\n      <div *ngIf="logoUrl" class="logo">\n        <img [@animate]="{ value: \'*\', params: { x: \'50px\' } }" [src]="logoUrl" alt="logo">\n      </div>\n\n      <div [@animate]="{ value: \'*\', params: { x: \'-50px\' } }" class="title">{{titleText}}</div>\n\n      <form [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}" [formGroup]="loginForm" name="loginForm"\n            novalidate>\n\n        <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }" [appearance]="appearance">\n          <input [placeholder]="emailText" formControlName="email" matInput>\n          <mat-icon [color]="color" matSuffix>email</mat-icon>\n          <mat-error *ngIf="loginForm.get(\'email\')?.hasError(\'required\')">\n            {{emailErrorRequiredText}}\n          </mat-error>\n          <mat-error\n            *ngIf="!loginForm.get(\'email\')?.hasError(\'required\') &&\n                                loginForm.get(\'email\')?.hasError(\'email\')">\n            {{emailErrorPatternText}}\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }" [appearance]="appearance">\n          <input [placeholder]="passwordText" formControlName="password" matInput type="password">\n          <mat-icon [color]="color" matSuffix>lock</mat-icon>\n          <mat-error>\n            {{passwordErrorRequiredText}}\n          </mat-error>\n        </mat-form-field>\n\n        <div [@animate]="{ value: \'*\', params: { x: \'50px\' } }"\n             class="remember-forgot-password" fxLayout="row"\n             fxLayout.xs="column"\n             fxLayoutAlign="space-between center">\n          \x3c!--          <mat-checkbox class="remember-me" aria-label="Remember Me">--\x3e\n          \x3c!--            {{rememberMeText}}--\x3e\n          \x3c!--          </mat-checkbox>--\x3e\n\n          <button (click)="onResetPasswordRequested.emit()"\n                  *ngIf="resetPasswordEnabled"\n                  [@animate]="{ value: \'*\', params: { x: \'-50px\' } }"\n                  [color]="color"\n                  class="forgot-password"\n                  mat-button\n                  type="button">\n            {{forgotPasswordText}}\n          </button>\n        </div>\n\n        <button (click)="login()"\n                [color]="colorAccent"\n                [disabled]="loginForm.invalid"\n                aria-label="LOG IN"\n                class="submit-button"\n                id="loginButton"\n                mat-raised-button>\n          {{loginButtonText}}\n        </button>\n\n      </form>\n\n      <div *ngIf="providers.length > 0"\n           [@animate]="{ value: \'*\', params: { z: \'50px\', delay: \'50ms\', scale: \'0.2\' } }"\n           class="separator">\n        <span class="text">{{orLabelText}}</span>\n      </div>\n\n      <ngx-auth-firebaseui-providers [providers]="providers"\n                                     fxLayoutAlign="center center"\n                                     layout="column"\n                                     theme="raised"></ngx-auth-firebaseui-providers>\n\n      <div *ngIf="registrationEnabled"\n           [@animateStagger]="{ value: \'100\' }"\n           class="register"\n           fxLayout="column" fxLayoutAlign="center center">\n        <span [@animate]="{ value: \'*\', params: { x: \'100px\' } }" class="text">\n          {{dontHaveAnAccountText}}\n        </span>\n        <button (click)="onCreateAccountRequested.emit()"\n                [@animate]="{ value: \'*\', params: { x: \'-100px\' } }"\n                [color]="color"\n                id="createAccountButton"\n                mat-button\n                type="button">{{createAccountButtonText}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n',encapsulation:e.ViewEncapsulation.None,animations:et,styles:['ngx-auth-firebaseui-login #login-form-wrapper{flex:1 0 auto;padding:32px}ngx-auth-firebaseui-login #login-form-wrapper #login-form{width:384px;max-width:384px;padding:32px;text-align:center}ngx-auth-firebaseui-login #login-form-wrapper #login-form .logo{width:150px;height:150px;margin:32px auto}ngx-auth-firebaseui-login #login-form-wrapper #login-form .title{font-size:20px;margin:16px 0 32px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form{width:100%;text-align:left}ngx-auth-firebaseui-login #login-form-wrapper #login-form form mat-form-field{width:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form form mat-checkbox{margin:0}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password{font-size:13px;margin-top:8px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password .remember-me{margin-bottom:16px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password .forgot-password{font-size:13px;font-weight:500;margin-bottom:16px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .submit-button{width:220px;margin:16px auto;display:block}@media screen and (max-width:599px){ngx-auth-firebaseui-login #login-form-wrapper{padding:16px}ngx-auth-firebaseui-login #login-form-wrapper #login-form{padding:24px;width:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .submit-button{width:90%}ngx-auth-firebaseui-login #login-form-wrapper #login-form button{width:80%}}ngx-auth-firebaseui-login #login-form-wrapper #login-form .register{margin:32px auto 24px;font-weight:500}ngx-auth-firebaseui-login #login-form-wrapper #login-form .register .text{margin-right:8px}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator{font-size:15px;font-weight:600;margin:24px auto;position:relative;overflow:hidden;width:100px}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text{display:inline-flex;position:relative;padding:0 8px;z-index:9999}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:after,ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:before{content:"";display:block;width:30px;position:absolute;top:10px;border-top:1px solid}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:before{right:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:after{left:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form button.facebook-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.github-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.google-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.microsoft-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.twitter-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.yahoo-raised{width:192px;text-transform:none;color:#fff;font-size:13px;margin-bottom:8px}']}),R(0,e.Inject(e.PLATFORM_ID))],r)}(),st=function(t){if(!t.parent||!t)return null;var e=t.parent.get("password"),r=t.parent.get("passwordConfirm");return e&&r?""===r.value||e.value===r.value?null:{passwordsNotMatching:!0}:null},ut=function(){function t(t,r,n){this.platformId=t,this.formBuilder=r,this.authProcess=n,this.titleText="CREATE AN ACCOUNT",this.readAndAcceptText="I read and accept the",this.termsAndConditionsText="terms and conditions",this.privacyPolicyText="privacy policy",this.createAccountButtonText="CREATE AN ACCOUNT",this.alreadyHaveAccountText="Already have an account?",this.loginButtonText="LOGIN",this.nameText="Name",this.nameErrorRequiredText="Name is required",this.emailText="Email",this.emailErrorRequiredText="Email is required",this.emailErrorPatternText="Please enter a valid email address",this.passwordText="Password",this.passwordErrorRequiredText="Password is required",this.passwordConfirmationText="Password Confirmation",this.passwordConfirmationErrorRequiredText="Password confirmation is required",this.passwordErrorMatchText="Password must match",this.onLoginRequested=new e.EventEmitter,this.authenticationError=!1,this.unsubscribeAll=new i.Subject,this.onSuccess=n.onSuccessEmitter,this.onError=n.onErrorEmitter}return Object.defineProperty(t.prototype,"color",{get:function(){return this.authenticationError?"warn":"primary"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"colorAccent",{get:function(){return this.authenticationError?"warn":"accent"},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){var t=this;p.isPlatformBrowser(this.platformId)&&(this.onErrorSubscription=this.onError.subscribe((function(){return t.authenticationError=!0}))),this.registerForm=this.formBuilder.group({name:["",m.Validators.required],email:["",[m.Validators.required,m.Validators.email]],password:["",m.Validators.required],passwordConfirm:["",[m.Validators.required,st]],tos:[""],privacyPolicy:[""]}),this.tosUrl&&this.registerForm.controls.tos.setValidators(m.Validators.requiredTrue),this.privacyPolicyUrl&&this.registerForm.controls.privacyPolicy.setValidators(m.Validators.requiredTrue),this.registerForm.controls.password.valueChanges.pipe(s.takeUntil(this.unsubscribeAll)).subscribe((function(){t.registerForm.controls.passwordConfirm.updateValueAndValidity()}))},t.prototype.ngOnDestroy=function(){this.unsubscribeAll.next(),this.unsubscribeAll.complete()},t.prototype.createAccount=function(){return M(this,void 0,void 0,(function(){return O(this,(function(t){switch(t.label){case 0:return[4,this.authProcess.signUp(this.registerForm.controls.name.value,{email:this.registerForm.controls.email.value,password:this.registerForm.controls.password.value})];case 1:return[2,t.sent()]}}))}))},t.ctorParameters=function(){return[{type:Object,decorators:[{type:e.Inject,args:[e.PLATFORM_ID]}]},{type:m.FormBuilder},{type:X}]},F([e.Input()],t.prototype,"logoUrl",void 0),F([e.Input()],t.prototype,"appearance",void 0),F([e.Input()],t.prototype,"tosUrl",void 0),F([e.Input()],t.prototype,"privacyPolicyUrl",void 0),F([e.Input()],t.prototype,"titleText",void 0),F([e.Input()],t.prototype,"readAndAcceptText",void 0),F([e.Input()],t.prototype,"termsAndConditionsText",void 0),F([e.Input()],t.prototype,"privacyPolicyText",void 0),F([e.Input()],t.prototype,"createAccountButtonText",void 0),F([e.Input()],t.prototype,"alreadyHaveAccountText",void 0),F([e.Input()],t.prototype,"loginButtonText",void 0),F([e.Input()],t.prototype,"nameText",void 0),F([e.Input()],t.prototype,"nameErrorRequiredText",void 0),F([e.Input()],t.prototype,"emailText",void 0),F([e.Input()],t.prototype,"emailErrorRequiredText",void 0),F([e.Input()],t.prototype,"emailErrorPatternText",void 0),F([e.Input()],t.prototype,"passwordText",void 0),F([e.Input()],t.prototype,"passwordErrorRequiredText",void 0),F([e.Input()],t.prototype,"passwordConfirmationText",void 0),F([e.Input()],t.prototype,"passwordConfirmationErrorRequiredText",void 0),F([e.Input()],t.prototype,"passwordErrorMatchText",void 0),F([e.Output()],t.prototype,"onSuccess",void 0),F([e.Output()],t.prototype,"onError",void 0),F([e.Output()],t.prototype,"onLoginRequested",void 0),t=F([e.Component({selector:"ngx-auth-firebaseui-register",template:'<div fxLayout="column" id="register">\n\n  <div fxLayout="column" fxLayoutAlign="center center" id="register-form-wrapper">\n\n    <div [@animateStagger]="{ value: \'50\' }" id="register-form">\n\n      <div *ngIf="logoUrl" class="logo">\n        <img [@animate]="{ value: \'*\', params: { x: \'50px\' } }" [src]="logoUrl" alt="logo">\n      </div>\n\n      <div [@animate]="{ value: \'*\', params: { x: \'-50px\' } }" class="title">{{titleText}}</div>\n\n      <form [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}" [formGroup]="registerForm" name="registerForm"\n            novalidate>\n\n        <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }" [appearance]="appearance">\n          <input [placeholder]="nameText" formControlName="name" matInput/>\n          <mat-icon [color]="color" matSuffix>person</mat-icon>\n          <mat-error>\n            {{nameErrorRequiredText}}\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }" [appearance]="appearance">\n          <input [placeholder]="emailText" formControlName="email" matInput/>\n          <mat-icon [color]="color" matSuffix>email</mat-icon>\n          <mat-error *ngIf="registerForm.get(\'email\')?.hasError(\'required\')">\n            {{emailErrorRequiredText}}\n          </mat-error>\n          <mat-error *ngIf="registerForm.get(\'email\')?.hasError(\'email\')">\n            {{emailErrorPatternText}}\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }" [appearance]="appearance">\n          <input [placeholder]="passwordText" formControlName="password" matInput type="password"/>\n          <mat-icon [color]="color" matSuffix>lock</mat-icon>\n          <mat-error>\n            {{passwordErrorRequiredText}}\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field [@animate]="{ value: \'*\', params: { x: \'50px\' } }" [appearance]="appearance">\n          <input [placeholder]="passwordConfirmationText" formControlName="passwordConfirm" matInput type="password"/>\n          <mat-icon [color]="color" matSuffix>lock</mat-icon>\n          <mat-error *ngIf="registerForm.get(\'passwordConfirm\')?.hasError(\'required\')">\n            {{passwordConfirmationErrorRequiredText}}\n          </mat-error>\n          <mat-error\n            *ngIf="\n              !registerForm.get(\'passwordConfirm\')?.hasError(\'required\') &&\n              registerForm.get(\'passwordConfirm\')?.hasError(\'passwordsNotMatching\')\n            ">\n            {{passwordErrorMatchText}}\n          </mat-error>\n        </mat-form-field>\n\n        <div *ngIf="this.tosUrl">\n          <mat-checkbox aria-label="{{readAndAcceptText}}" formControlName="tos" required>\n            <span>{{readAndAcceptText}}</span>\n            <a target="_blank" [href]="this.tosUrl">\n                {{termsAndConditionsText}}\n            </a>\n          </mat-checkbox>\n        </div>\n\n        <div *ngIf="this.privacyPolicyUrl">\n          <mat-checkbox aria-label="{{readAndAcceptText}}" formControlName="privacyPolicy" required>\n            <span>{{readAndAcceptText}}</span>\n            <a target="_blank" [href]="this.privacyPolicyUrl">\n                {{privacyPolicyText}}\n            </a>\n          </mat-checkbox>\n        </div>\n\n        <button (click)="createAccount()"\n                [color]="colorAccent"\n                [disabled]="registerForm.invalid"\n                aria-label="CREATE AN ACCOUNT"\n                class="submit-button"\n                id="createAccountButton"\n                mat-raised-button>\n          {{createAccountButtonText}}\n        </button>\n      </form>\n\n      <div [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}" class="register" fxLayout="column"\n           fxLayoutAlign="center center">\n        <span [@animate]="{ value: \'*\', params: { x: \'100px\' } }" class="text">\n          {{alreadyHaveAccountText}}\n        </span>\n        <button (click)="onLoginRequested.emit()"\n                [@animate]="{ value: \'*\', params: { x: \'-100px\' } }"\n                [color]="colorAccent"\n                id="loginButton"\n                mat-button\n                type="button">\n          {{loginButtonText}}\n        </button>\n      </div>\n\n    </div>\n  </div>\n</div>\n',encapsulation:e.ViewEncapsulation.None,animations:et,styles:['ngx-auth-firebaseui-register #register{width:100%;background-size:cover}ngx-auth-firebaseui-register #register #register-form-wrapper{flex:1 0 auto;padding:32px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form{width:384px;max-width:384px;padding:32px;text-align:center}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .logo{width:128px;margin:32px auto}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .title{font-size:20px;margin:16px 0 32px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form{width:100%;text-align:left}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form mat-form-field{width:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form mat-checkbox{margin:0}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .terms{margin:16px 0 32px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .terms a{font-size:16px;margin-left:4px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .submit-button{width:220px;margin:16px auto;display:block}@media screen and (max-width:599px){ngx-auth-firebaseui-register #register #register-form-wrapper{padding:16px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form{padding:24px;width:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .submit-button{width:90%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button{width:80%}}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .register{margin:32px auto 24px;font-weight:500}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .register .text{margin-right:8px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator{font-size:15px;font-weight:600;margin:24px auto;position:relative;overflow:hidden;width:100px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text{display:inline-flex;position:relative;padding:0 8px;z-index:9999}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:after,ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:before{content:"";display:block;width:30px;position:absolute;top:10px;border-top:1px solid}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:before{right:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:after{left:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.facebook,ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.google{width:192px;text-transform:none;color:#fff;font-size:13px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.google{background-color:#d73d32;margin-bottom:8px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.facebook{background-color:#3f5c9a}ngx-auth-firebaseui-register ::ng-deep .mat-checkbox-label{display:flex;flex-wrap:wrap}']}),R(0,e.Inject(e.PLATFORM_ID))],t)}(),lt=function(){function t(t,r,n,o){this.auth=t,this.authProcess=r,this.fireStoreService=n,this.config=o,this.canLogout=!0,this.canEditAccount=!0,this.canDeleteAccount=!0,this.onSignOut=new e.EventEmitter,this.onAccountEdited=new e.EventEmitter,this.onAccountDeleted=new e.EventEmitter}return t.prototype.changeEditMode=function(){var t=this;this.editMode?(this.reset(),this.editMode=!1):this.initUpdateFormGroup().subscribe((function(e){t.updateFormGroup=e,t.editMode=!0}))},t.prototype.reset=function(){this.updateFormGroup.reset(),this.updateFormGroup.disable(),this.updateFormGroup=null},t.prototype.save=function(){return M(this,void 0,void 0,(function(){var t,e,r;return O(this,(function(n){switch(n.label){case 0:if(!this.updateFormGroup.dirty)return[3,12];this.editMode=!1,t=this.authProcess.user,e=[],n.label=1;case 1:return n.trys.push([1,10,,11]),this.updateNameFormControl.dirty?[4,t.updateProfile({displayName:this.updateNameFormControl.value})]:[3,3];case 2:n.sent(),e.push("your name has been updated to "+t.displayName),n.label=3;case 3:return this.updateEmailFormControl.dirty?[4,t.updateEmail(this.updateEmailFormControl.value)]:[3,5];case 4:n.sent(),e.push("your email has been updated to "+t.email),n.label=5;case 5:return this.updatePhoneNumberFormControl.dirty?[4,t.updatePhoneNumber(this.updatePhoneNumberFormControl.value)]:[3,7];case 6:n.sent(),console.log("phone number = ",this.updatePhoneNumberFormControl.value),e.push("your phone number has been updated to "+t.phoneNumber),n.label=7;case 7:return this.config.enableFirestoreSync?[4,this.fireStoreService.updateUserData(this.authProcess.parseUserInfo(t))]:[3,9];case 8:n.sent(),n.label=9;case 9:return[3,11];case 10:return r=n.sent(),this.authProcess.showToast(r&&r.message?r.message:r),console.error(r),[3,11];case 11:e.length>0&&this.authProcess.showToast(e.join("\\n")),this.updateFormGroup.reset(),n.label=12;case 12:return[2]}}))}))},t.prototype.signOut=function(){var t=this;this.auth.signOut().then((function(){return t.onSignOut.emit()})).catch((function(t){return console.error("An error happened while signing out!",t)}))},t.prototype.deleteAccount=function(){return M(this,void 0,void 0,(function(){var t,e;return O(this,(function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),t=this.authProcess.user,[4,this.authProcess.user.delete()];case 1:return r.sent(),[4,this.fireStoreService.deleteUserData(t.uid)];case 2:return r.sent(),this.onAccountDeleted.emit(),this.editMode=!1,console.log("Your account has been successfully deleted!"),this.authProcess.showToast("Your account has been successfully deleted!"),[3,4];case 3:return e=r.sent(),console.log("Error while delete user account",e),this.authProcess.showToast("Error occurred while deleting your account: "+e.message),[3,4];case 4:return[2]}}))}))},t.prototype.initUpdateFormGroup=function(){var t=this;return this.authProcess.user$.pipe(s.take(1),s.map((function(e){var r=new m.FormGroup({name:t.updateNameFormControl=new m.FormControl({value:e.displayName,disabled:t.editMode},[m.Validators.required,m.Validators.minLength(t.config.nameMinLength),m.Validators.maxLength(t.config.nameMaxLength)]),email:t.updateEmailFormControl=new m.FormControl({value:e.email,disabled:t.editMode},[m.Validators.required,m.Validators.pattern(rt)]),phoneNumber:t.updatePhoneNumberFormControl=new m.FormControl({value:e.phoneNumber,disabled:t.editMode},[m.Validators.pattern(nt)])});return r.enable(),r})))},t.ctorParameters=function(){return[{type:n.AngularFireAuth},{type:X},{type:G},{type:void 0,decorators:[{type:e.Inject,args:[e.forwardRef((function(){return B}))]}]}]},F([e.Input()],t.prototype,"editMode",void 0),F([e.Input()],t.prototype,"canLogout",void 0),F([e.Input()],t.prototype,"canEditAccount",void 0),F([e.Input()],t.prototype,"canDeleteAccount",void 0),F([e.Input()],t.prototype,"appearance",void 0),F([e.Output()],t.prototype,"onSignOut",void 0),F([e.Output()],t.prototype,"onAccountEdited",void 0),F([e.Output()],t.prototype,"onAccountDeleted",void 0),t=F([e.Component({selector:"ngx-auth-firebaseui-user",template:'<div *ngIf="auth.authState| async; then authenticated else none">\n\n</div>\n\n<ng-template #authenticated>\n  <mat-card *ngIf="auth.user | async as user">\n    \x3c!--<form [formGroup]="updateFormGroup" >--\x3e\n    \x3c!--card header--\x3e\n    <mat-card-header fxLayout="column" fxLayoutAlign="center center">\n\n      <img *ngIf="authProcess?.getUserPhotoUrl() | async as photoUrl" [src]="photoUrl" mat-card-avatar>\n\n      <div *ngIf="user.emailVerified; then emailVerified else emailNotVerified"></div>\n      <ng-template #emailVerified>\n        <mat-icon color="primary"\n                  matTooltip="email is verified"\n                  matTooltipPosition="after">\n          verified_user\n        </mat-icon>\n      </ng-template>\n      <ng-template #emailNotVerified>\n        <mat-icon color="warn"\n                  matTooltip="email is not verified"\n                  matTooltipPosition="after">\n          warning\n        </mat-icon>\n      </ng-template>\n\n    </mat-card-header>\n\n    \x3c!--card content--\x3e\n    <mat-card-content *ngIf="editMode; then edit else readonly">\n    </mat-card-content>\n\n    <ng-template #edit>\n      <form (submit)="save()" [formGroup]="updateFormGroup">\n\n        <mat-card-content fxLayout="column" fxLayoutAlign="center center">\n          <div fxLayoutAlign="center">\n            <button (click)="changeEditMode()" class="edit-button" color="warn"\n                    mat-raised-button>\n              cancel\n            </button>\n          </div>\n\n          \x3c!--name--\x3e\n          <mat-form-field [appearance]="appearance" class="full-width">\n            <mat-label>Name</mat-label>\n            <input [formControl]="updateNameFormControl"\n                   matInput\n                   placeholder="Name">\n            <mat-icon matSuffix>person</mat-icon>\n            <mat-hint align="end" aria-live="polite"> {{ updateNameFormControl.value?.length }}\n              / {{ config.nameMaxLength }} </mat-hint>\n            <mat-error *ngIf="updateNameFormControl.hasError(\'required\')">\n              Name is required\n            </mat-error>\n          </mat-form-field>\n\n          \x3c!--email--\x3e\n          <mat-form-field [appearance]="appearance" class="full-width">\n            <mat-label>E-mail</mat-label>\n            <input [formControl]="updateEmailFormControl"\n                   matInput\n                   placeholder="E-mail">\n            <mat-icon matSuffix>email</mat-icon>\n            <mat-error *ngIf="updateEmailFormControl.hasError(\'required\')">\n              E-mail is required {{updateEmailFormControl.value}}\n            </mat-error>\n            <mat-error *ngIf="updateEmailFormControl.hasError(\'pattern\')">\n              Please enter a valid e-mail address {{updateEmailFormControl.value}}\n            </mat-error>\n          </mat-form-field>\n\n          \x3c!--phone number--\x3e\n          <mat-form-field *ngIf="false" [appearance]="appearance" class="full-width">\n            <mat-label>Phone number</mat-label>\n            <input [formControl]="updatePhoneNumberFormControl"\n                   matInput\n                   placeholder="Phone number"\n                   type="tel">\n            <mat-icon matSuffix>phone</mat-icon>\n            <mat-hint align="end" aria-live="polite">\n              The phone number is international. Therefore, it should start with a + sign or 00,\n              followed by the country code, - and national number e.g: +49-12345678 or 0041-1234567890\n\n              NOTE : the phone number must be a valid phone credential !!\n            </mat-hint>\n            <mat-error *ngIf="updatePhoneNumberFormControl.hasError(\'pattern\')">\n              Please enter a valid phone number\n            </mat-error>\n          </mat-form-field>\n\n        </mat-card-content>\n\n        <mat-card-actions fxLayout="column">\n          <button color="primary"\n                  mat-button\n                  type="submit">\n            Save changes\n          </button>\n        </mat-card-actions>\n      </form>\n    </ng-template>\n\n    <ng-template #readonly>\n      <div fxLayoutAlign="center">\n        <button *ngIf="canEditAccount" (click)="changeEditMode()" class="edit-button" color="primary"\n                mat-raised-button>\n          edit\n        </button>\n      </div>\n\n      \x3c!--name--\x3e\n      <mat-form-field [appearance]="appearance" class="full-width">\n        <mat-label>Name</mat-label>\n        <input [disabled]="!editMode"\n               [value]="user.displayName"\n               matInput\n               placeholder="Name">\n        <mat-icon color="primary" matSuffix>person</mat-icon>\n      </mat-form-field>\n\n      \x3c!--email--\x3e\n      <mat-form-field [appearance]="appearance" class="full-width">\n        <mat-label>E-mail</mat-label>\n        <input [disabled]="!editMode"\n               [value]="user.email" matInput\n               placeholder="E-mail">\n        <mat-icon color="primary" matSuffix>email</mat-icon>\n      </mat-form-field>\n\n      \x3c!--phone number--\x3e\n      <mat-form-field *ngIf="false" [appearance]="appearance" class="full-width">\n        <mat-label>Phone number</mat-label>\n        <input [disabled]="!editMode"\n               [value]="user.phoneNumber"\n               matInput\n               placeholder="Phone number">\n        <mat-icon color="primary" matSuffix>phone</mat-icon>\n      </mat-form-field>\n\n      <mat-card-actions fxLayout="column">\n        <button (click)="signOut()" *ngIf="canLogout" color="primary" mat-button>Sign out</button>\n        <button (click)="deleteAccount()" *ngIf="canDeleteAccount" color="warn" mat-button>Delete account</button>\n      </mat-card-actions>\n\n    </ng-template>\n\n  </mat-card>\n\n</ng-template>\n\n\n<ng-template #none>\n  <mat-card class="none-card" fxLayout="row" fxLayoutAlign="center center">\n    <mat-card-content fxLayout="row" fxLayoutAlign="center center">\n      <mat-icon color="accent">warning</mat-icon>\n      <span>You are not logged in!</span>\n    </mat-card-content>\n  </mat-card>\n</ng-template>\n',styles:[".edit-button{margin:1rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.none-card{min-height:430px}.none-card span{font-size:24px;text-align:center;color:rgba(0,0,0,.54)}"]}),R(3,e.Inject(e.forwardRef((function(){return B}))))],t)}();($=t.Theme||(t.Theme={})).DEFAULT="default",$.CLASSIC="classic",$.STROKED="stroked",$.FAB="fab",$.MINI_FAB="mini-fab",$.RAISED="raised",(K=t.Layout||(t.Layout={})).ROW="row",K.COLUMN="column";var ct=function(){function r(e,r){this.authProcess=e,this.dialog=r,this.layout=t.Layout.ROW,this.providers=t.AuthProvider.ALL,this.themes=t.Theme,this.authProvider=t.AuthProvider,this.onSuccess=e.onSuccessEmitter,this.onError=e.onErrorEmitter}return r.prototype.processLegalSignUP=function(t){var e=this;if(this.tosUrl||this.privacyPolicyUrl){var r={tosUrl:this.tosUrl,privacyPolicyUrl:this.privacyPolicyUrl,authProvider:t};this.dialogRef=this.dialog.open(Q,{data:r}),this.dialogRef.afterClosed().subscribe((function(r){r&&r.checked&&e.authProcess.signInWith(t),e.dialogRef=null}))}else this.authProcess.signInWith(t)},r.ctorParameters=function(){return[{type:X},{type:c.MatDialog}]},F([e.Input()],r.prototype,"theme",void 0),F([e.Input()],r.prototype,"layout",void 0),F([e.Input()],r.prototype,"providers",void 0),F([e.Output()],r.prototype,"onSuccess",void 0),F([e.Output()],r.prototype,"onError",void 0),F([e.Input()],r.prototype,"tosUrl",void 0),F([e.Input()],r.prototype,"privacyPolicyUrl",void 0),r=F([e.Component({selector:"ngx-auth-firebaseui-providers",template:'<div [@animateStagger]="{ value: \'50\' }" [ngSwitch]="theme">\n\n  \x3c!--default icon buttons--\x3e\n  <div *ngSwitchDefault\n       [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'"\n       [fxLayout]="layout"\n       fxLayout.xs="column">\n    <button (click)="processLegalSignUP(authProvider.Google)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            mat-button>\n      <mat-icon svgIcon="google-colored"></mat-icon>\n      Google\n    </button>\n\n    <button (click)="processLegalSignUP(authProvider.Apple)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Apple)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="apple-filled"\n            mat-button>\n      <mat-icon svgIcon="apple"></mat-icon>\n      Apple\n    </button>\n\n    <button (click)="processLegalSignUP(authProvider.Facebook)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="facebook-filled"\n            mat-button>\n      <mat-icon svgIcon="facebook"></mat-icon>\n      Facebook\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Twitter)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="twitter-filled"\n            mat-button>\n      <mat-icon svgIcon="twitter"></mat-icon>\n      Twitter\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Github)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            mat-button>\n      <mat-icon svgIcon="github"></mat-icon>\n      GitHub\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Microsoft)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            mat-button>\n      <mat-icon svgIcon="microsoft"></mat-icon>\n      Microsoft\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Yahoo)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            mat-button>\n      <mat-icon svgIcon="yahoo"></mat-icon>\n      Yahoo\n    </button>\n  </div>\n\n  \x3c!--classic--\x3e\n  <div *ngSwitchCase="themes.CLASSIC"\n       [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'"\n       [fxLayout]="layout"\n       class="buttons-classic"\n       fxLayout.xs="column">\n    <button (click)="processLegalSignUP(authProvider.Google)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="google-classic"\n            mat-button>\n      Google\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Apple)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Apple)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="apple-classic"\n            mat-button>\n      Apple\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Facebook)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="facebook-classic"\n            mat-button>\n      Facebook\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Twitter)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="twitter-classic"\n            mat-button>\n      Twitter\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Github)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="github-classic"\n            mat-button>\n      GitHub\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Microsoft)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="microsoft-classic"\n            mat-button>\n      Microsoft\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Yahoo)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="yahoo-classic"\n            mat-button>\n      Yahoo\n    </button>\n  </div>\n\n  \x3c!--stroked--\x3e\n  <div *ngSwitchCase="themes.STROKED"\n       [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'"\n       [fxLayout]="layout"\n       class="buttons-classic"\n       fxLayout.xs="column">\n    <button (click)="processLegalSignUP(authProvider.Google)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="google-classic"\n            mat-stroked-button>\n      Google\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Apple)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Apple)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="apple-classic"\n            mat-stroked-button>\n      Apple\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Facebook)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="facebook-classic"\n            mat-stroked-button>\n      Facebook\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Twitter)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="twitter-classic"\n            mat-stroked-button>\n      Twitter\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Github)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="github-classic"\n            mat-stroked-button>\n      GitHub\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Microsoft)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="microsoft-classic"\n            mat-stroked-button>\n      Microsoft\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Yahoo)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="yahoo-classic"\n            mat-stroked-button>\n      Yahoo\n    </button>\n  </div>\n\n  \x3c!--raised--\x3e\n  <div *ngSwitchCase="themes.RAISED"\n       [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'"\n       [fxLayout]="layout"\n       class="buttons-raised"\n       fxLayout.xs="column">\n    <button (click)="processLegalSignUP(authProvider.Google)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="google-raised"\n            mat-raised-button>\n      Google\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Apple)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Apple)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="apple-raised"\n            mat-raised-button>\n      Apple\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Facebook)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="facebook-raised"\n            mat-raised-button>\n      Facebook\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Twitter)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="twitter-raised"\n            mat-raised-button>\n      Twitter\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Github)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="github-raised"\n            mat-raised-button>\n      GitHub\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Microsoft)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="microsoft-raised"\n            mat-raised-button>\n      Microsoft\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Yahoo)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            [ngClass.xs]="{\'space-full-xs\':true}"\n            class="yahoo-raised"\n            mat-raised-button>\n      Yahoo\n    </button>\n  </div>\n\n  \x3c!--fab--\x3e\n  <div *ngSwitchCase="themes.FAB"\n       [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'"\n       [fxLayout]="layout"\n       class="buttons-raised">\n    <button (click)="processLegalSignUP(authProvider.Google)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="google-raised"\n            mat-fab>\n      <mat-icon svgIcon="google"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Apple)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Apple)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="apple-raised"\n            mat-fab>\n      <mat-icon svgIcon="apple"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Facebook)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="facebook-raised"\n            mat-fab>\n      <mat-icon svgIcon="facebook"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Twitter)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="twitter-raised"\n            mat-fab>\n      <mat-icon svgIcon="twitter"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Github)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="github-raised"\n            mat-fab>\n      <mat-icon svgIcon="github"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Microsoft)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="microsoft"\n            mat-fab>\n      <mat-icon svgIcon="microsoft"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Yahoo)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="yahoo-raised"\n            mat-fab>\n      <mat-icon svgIcon="yahoo"></mat-icon>\n    </button>\n  </div>\n\n  \x3c!--mini-fab--\x3e\n  <div *ngSwitchCase="themes.MINI_FAB"\n       [fxLayoutAlign]="layout == \'row\' ? \'space-around center\' : \'stretch\'"\n       [fxLayout]="layout"\n       class="buttons-raised"\n       fxLayoutAlign.xs="center center">\n    <button (click)="processLegalSignUP(authProvider.Google)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Google)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="google-raised"\n            fxFlexAlign="center"\n            mat-mini-fab>\n      <mat-icon svgIcon="google"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Apple)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Apple)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="apple-raised"\n            mat-mini-fab>\n      <mat-icon svgIcon="apple"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Facebook)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Facebook)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="facebook-raised"\n            mat-mini-fab>\n      <mat-icon svgIcon="facebook"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Twitter)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Twitter)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="twitter-raised"\n            mat-mini-fab>\n      <mat-icon class="icon-white" svgIcon="twitter"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Github)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Github)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="github-raised"\n            mat-mini-fab>\n      <mat-icon svgIcon="github"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Microsoft)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Microsoft)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="microsoft"\n            mat-mini-fab>\n      <mat-icon svgIcon="microsoft"></mat-icon>\n    </button>\n    <button (click)="processLegalSignUP(authProvider.Yahoo)"\n            *ngIf="providers === authProvider.ALL || providers.includes(authProvider.Yahoo)"\n            [@animate]="{value:\'*\',params:{duration:\'300ms\',y:\'100px\'}}"\n            class="yahoo-raised"\n            mat-mini-fab>\n      <mat-icon svgIcon="yahoo"></mat-icon>\n    </button>\n  </div>\n</div>\n',animations:et,styles:[":host{display:block}.space-full-xs{width:100%;margin:.4rem}.apple-filled mat-icon svg path{fill:#000}.facebook-filled mat-icon{fill:#385899}.twitter-filled mat-icon{fill:#1da1f2}.buttons-raised button{color:#fff!important}.buttons-raised .google-raised{background-color:#db4437}.buttons-raised .apple-raised{background-color:#000}.buttons-raised .facebook-raised{background-color:#385899}.buttons-raised .twitter-raised{background-color:#1da1f2}.buttons-raised .github-raised{background-color:#000}.buttons-raised .microsoft-raised{background-color:#0078d4}.buttons-raised .yahoo-raised{background-color:#720e9e}.buttons-raised .phone-raised{background-color:#02bd7e}.buttons-classic button.google-classic{color:#db4437!important}.buttons-classic button.apple-classic{color:#000!important}.buttons-classic .facebook-classic{color:#385899!important}.buttons-classic .twitter-classic{color:#1da1f2!important}.buttons-classic .github-classic{color:#000!important}.buttons-classic .microsoft-classic{color:#0078d4!important}.buttons-classic .yahoo-classic{color:#720e9e!important}.buttons-classic .phone-classic{color:#02bd7e}.icon-white{color:#fff}.icon-white mat-icon{fill:#fff}button.microsoft{background:#f8f9fa}"]})],r)}(),pt={enableFirestoreSync:!0,toastMessageOnAuthSuccess:!0,toastMessageOnAuthError:!0,authGuardFallbackURL:"/",authGuardLoggedInURL:"/",passwordMaxLength:60,passwordMinLength:8,nameMaxLength:50,nameMinLength:2,guardProtectedRoutesUntilEmailIsVerified:!0,enableEmailVerification:!0};function mt(t){return Object.assign({},pt,t)}var dt=function(){function t(t,e,r){this.config=t,this.router=e,this.authProcess=r}return t.prototype.canActivate=function(t,e){var r=this;return this.authProcess.afa.user.pipe(s.map((function(t){return t?!(r.config.guardProtectedRoutesUntilEmailIsVerified&&!t.emailVerified&&!t.isAnonymous)||(r.config.authGuardFallbackURL&&r.router.navigate([""+r.config.authGuardFallbackURL],{queryParams:{redirectUrl:e.url}}),!1):(r.config.authGuardFallbackURL&&r.router.navigate(["/"+r.config.authGuardFallbackURL],{queryParams:{redirectUrl:e.url}}),!1)})))},t.ctorParameters=function(){return[{type:void 0,decorators:[{type:e.Inject,args:[B]}]},{type:r.Router},{type:X}]},t.ɵprov=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(B),e.ɵɵinject(r.Router),e.ɵɵinject(X))},token:t,providedIn:"root"}),t=F([e.Injectable({providedIn:"root"}),R(0,e.Inject(B))],t)}(),gt=function(){function t(t,e,r){this.iconRegistry=t,this.sanitizer=e,r.listenToUserEvents(),this.registerProviderIcons()}var o;return o=t,t.forRoot=function(t,e,r){return void 0===e&&(e=function(){}),void 0===r&&(r={}),{ngModule:o,providers:[{provide:b.FIREBASE_OPTIONS,useValue:t},{provide:b.FIREBASE_APP_NAME,useFactory:e},{provide:D,useValue:r},{provide:B,useFactory:mt,deps:[D]},X,G,dt]}},t.prototype.registerProviderIcons=function(){this.iconRegistry.addSvgIcon("google",this.sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/google.svg")).addSvgIcon("apple",this.sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/apple.svg")).addSvgIcon("google-colored",this.sanitizer.bypassSecurityTrustResourceUrl("/assets/google.svg")).addSvgIcon("facebook",this.sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/facebook.svg")).addSvgIcon("twitter",this.sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/twitter.svg")).addSvgIcon("github",this.sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/github-circle.svg")).addSvgIcon("microsoft",this.sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/microsoft.svg")).addSvgIcon("yahoo",this.sanitizer.bypassSecurityTrustResourceUrl("/assets/mdi/yahoo.svg")).addSvgIcon("phone",this.sanitizer.bypassSecurityTrustResourceUrl("/assets/phone.svg"))},t.ctorParameters=function(){return[{type:T.MatIconRegistry},{type:S.DomSanitizer},{type:X}]},t=o=F([e.NgModule({imports:[p.CommonModule,r.RouterModule,f.HttpClientModule,v.FlexLayoutModule,m.FormsModule,m.ReactiveFormsModule,d.MatTabsModule,y.MatCardModule,E.MatInputModule,x.MatButtonModule,T.MatIconModule,l.MatSnackBarModule,I.MatDividerModule,P.MatChipsModule,k.MatTooltipModule,c.MatDialogModule,w.MatCheckboxModule,C.MatProgressSpinnerModule,A.MatProgressBarModule,c.MatDialogModule,L.MatMenuModule,g.MatPasswordStrengthModule,n.AngularFireAuthModule,u.AngularFirestoreModule],exports:[ot,lt,at,ct,J,n.AngularFireAuthModule,u.AngularFirestoreModule,it,ut],declarations:[ot,lt,at,ct,J,Q,it,ut],entryComponents:[lt,Q]})],t)}();t.AuthComponent=ot,t.AuthProcessService=X,t.AuthProvidersComponent=ct,t.EMAIL_REGEX=rt,t.EmailConfirmationComponent=J,t.FirestoreSyncService=G,t.LegalityDialogComponent=Q,t.LoggedInGuard=dt,t.NgxAuthFirebaseUIConfigToken=B,t.NgxAuthFirebaseUIModule=gt,t.NgxAuthFirebaseuiAvatarComponent=at,t.NgxAuthFirebaseuiLoginComponent=it,t.NgxAuthFirebaseuiRegisterComponent=ut,t.PHONE_NUMBER_REGEX=nt,t.UserComponent=lt,t.UserProvidedConfigToken=D,t.appleAuthProvider=_,t.collections=q,t.confirmPasswordValidator=st,t.defaultAuthFirebaseUIConfig=pt,t.facebookAuthProvider=V,t.githubAuthProvider=Y,t.googleAuthProvider=j,t.microsoftAuthProvider=W,t.ngxAuthFirebaseUIConfigFactory=mt,t.twitterAuthProvider=z,t.yahooAuthProvider=H,t.ɵa=pt,t.ɵb=mt,t.ɵd=et,t.ɵe=J,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-auth-firebaseui.umd.min.js.map