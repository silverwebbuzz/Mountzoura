import { InjectionToken, ModuleWithProviders, NgZone, Version } from '@angular/core';
import { analytics, app, auth, database, firestore, functions, messaging, performance, remoteConfig, storage } from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
export interface FirebaseOptions {
    [key: string]: any;
}
export interface FirebaseAppConfig {
    [key: string]: any;
}
export declare const FIREBASE_OPTIONS: InjectionToken<FirebaseOptions>;
export declare const FIREBASE_APP_NAME: InjectionToken<string | FirebaseAppConfig>;
export declare class FirebaseApp implements Partial<app.App> {
    name: string;
    options: {};
    analytics: () => analytics.Analytics;
    auth: () => auth.Auth;
    database: (databaseURL?: string) => database.Database;
    messaging: () => messaging.Messaging;
    performance: () => performance.Performance;
    storage: (storageBucket?: string) => storage.Storage;
    delete: () => Promise<void>;
    firestore: () => firestore.Firestore;
    functions: (region?: string) => functions.Functions;
    remoteConfig: () => remoteConfig.RemoteConfig;
}
export declare const VERSION: Version;
export declare function ɵfirebaseAppFactory(options: FirebaseOptions, zone: NgZone, nameOrConfig?: string | FirebaseAppConfig | null): FirebaseApp;
export declare class AngularFireModule {
    static initializeApp(options: FirebaseOptions, nameOrConfig?: string | FirebaseAppConfig): ModuleWithProviders<AngularFireModule>;
    constructor(platformId: Object);
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AngularFireModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AngularFireModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuYXBwLm1vZHVsZS5kLnRzIiwic291cmNlcyI6WyJmaXJlYmFzZS5hcHAubW9kdWxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nWm9uZSwgVmVyc2lvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYW5hbHl0aWNzLCBhcHAsIGF1dGgsIGRhdGFiYXNlLCBmaXJlc3RvcmUsIGZ1bmN0aW9ucywgbWVzc2FnaW5nLCBwZXJmb3JtYW5jZSwgcmVtb3RlQ29uZmlnLCBzdG9yYWdlIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcbmV4cG9ydCBpbnRlcmZhY2UgRmlyZWJhc2VPcHRpb25zIHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5leHBvcnQgaW50ZXJmYWNlIEZpcmViYXNlQXBwQ29uZmlnIHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBGSVJFQkFTRV9PUFRJT05TOiBJbmplY3Rpb25Ub2tlbjxGaXJlYmFzZU9wdGlvbnM+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRklSRUJBU0VfQVBQX05BTUU6IEluamVjdGlvblRva2VuPHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnPjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZpcmViYXNlQXBwIGltcGxlbWVudHMgUGFydGlhbDxhcHAuQXBwPiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG9wdGlvbnM6IHt9O1xuICAgIGFuYWx5dGljczogKCkgPT4gYW5hbHl0aWNzLkFuYWx5dGljcztcbiAgICBhdXRoOiAoKSA9PiBhdXRoLkF1dGg7XG4gICAgZGF0YWJhc2U6IChkYXRhYmFzZVVSTD86IHN0cmluZykgPT4gZGF0YWJhc2UuRGF0YWJhc2U7XG4gICAgbWVzc2FnaW5nOiAoKSA9PiBtZXNzYWdpbmcuTWVzc2FnaW5nO1xuICAgIHBlcmZvcm1hbmNlOiAoKSA9PiBwZXJmb3JtYW5jZS5QZXJmb3JtYW5jZTtcbiAgICBzdG9yYWdlOiAoc3RvcmFnZUJ1Y2tldD86IHN0cmluZykgPT4gc3RvcmFnZS5TdG9yYWdlO1xuICAgIGRlbGV0ZTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBmaXJlc3RvcmU6ICgpID0+IGZpcmVzdG9yZS5GaXJlc3RvcmU7XG4gICAgZnVuY3Rpb25zOiAocmVnaW9uPzogc3RyaW5nKSA9PiBmdW5jdGlvbnMuRnVuY3Rpb25zO1xuICAgIHJlbW90ZUNvbmZpZzogKCkgPT4gcmVtb3RlQ29uZmlnLlJlbW90ZUNvbmZpZztcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFZFUlNJT046IFZlcnNpb247XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiDJtWZpcmViYXNlQXBwRmFjdG9yeShvcHRpb25zOiBGaXJlYmFzZU9wdGlvbnMsIHpvbmU6IE5nWm9uZSwgbmFtZU9yQ29uZmlnPzogc3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCBudWxsKTogRmlyZWJhc2VBcHA7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbmd1bGFyRmlyZU1vZHVsZSB7XG4gICAgc3RhdGljIGluaXRpYWxpemVBcHAob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCBuYW1lT3JDb25maWc/OiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8QW5ndWxhckZpcmVNb2R1bGU+O1xuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtSWQ6IE9iamVjdCk7XG59XG4iXX0=